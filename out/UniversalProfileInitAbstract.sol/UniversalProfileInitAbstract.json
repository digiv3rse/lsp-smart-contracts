{
  "abi": [
    {
      "inputs": [],
      "name": "CannotTransferOwnershipToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC725X_ContractDeploymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC725X_CreateOperationsRequireEmptyRecipientAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC725X_ExecuteParametersLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ERC725X_InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC725X_MsgValueDisallowedInDelegateCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC725X_MsgValueDisallowedInStaticCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC725X_NoContractBytecodeProvided",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operationTypeProvided",
          "type": "uint256"
        }
      ],
      "name": "ERC725X_UnknownOperationType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dataKeysLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataValuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC725Y_DataKeysValuesLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "renounceOwnershipStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "renounceOwnershipEnd",
          "type": "uint256"
        }
      ],
      "name": "NotInRenounceOwnershipInterval",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operationType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "name": "DataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operationType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RenounceOwnershipInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "receivedData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnedValue",
          "type": "bytes"
        }
      ],
      "name": "UniversalReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ValueReceived",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "operationsType",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operationType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "receivedData",
          "type": "bytes"
        }
      ],
      "name": "universalReceiver",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnedValues",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "acceptOwnership()": "79ba5097",
    "execute(uint256,address,uint256,bytes)": "44c028fe",
    "execute(uint256[],address[],uint256[],bytes[])": "13ced88d",
    "getData(bytes32)": "54f6127f",
    "getData(bytes32[])": "4e3e6e9c",
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "owner()": "8da5cb5b",
    "pendingOwner()": "e30c3978",
    "renounceOwnership()": "715018a6",
    "setData(bytes32,bytes)": "7f23690c",
    "setData(bytes32[],bytes[])": "14a6e293",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferOwnership(address)": "f2fde38b",
    "universalReceiver(bytes32,bytes)": "6bb56a14"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotTransferOwnershipToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725X_ContractDeploymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725X_CreateOperationsRequireEmptyRecipientAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725X_ExecuteParametersLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC725X_InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725X_MsgValueDisallowedInDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725X_MsgValueDisallowedInStaticCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725X_NoContractBytecodeProvided\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operationTypeProvided\",\"type\":\"uint256\"}],\"name\":\"ERC725X_UnknownOperationType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataKeysLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataValuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"renounceOwnershipStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renounceOwnershipEnd\",\"type\":\"uint256\"}],\"name\":\"NotInRenounceOwnershipInterval\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operationType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operationType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RenounceOwnershipInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receivedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnedValue\",\"type\":\"bytes\"}],\"name\":\"UniversalReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValueReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"operationsType\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operationType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"receivedData\",\"type\":\"bytes\"}],\"name\":\"universalReceiver\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedValues\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Fabian Vogelsteller <fabian@lukso.network>\",\"details\":\"Implementation of the ERC725Account + LSP1 universalReceiver\",\"errors\":{\"CannotTransferOwnershipToSelf()\":[{\"details\":\"reverts when trying to transfer ownership to the address(this)\"}],\"ERC725X_ContractDeploymentFailed()\":[{\"details\":\"reverts when contract deployment via `ERC725X.execute(...)` failed. whether using operation type 1 (CREATE) or 2 (CREATE2).\"}],\"ERC725X_CreateOperationsRequireEmptyRecipientAddress()\":[{\"details\":\"reverts when passing a `to` address while deploying a contract va `ERC725X.execute(...)` whether using operation type 1 (CREATE) or 2 (CREATE2).\"}],\"ERC725X_ExecuteParametersLengthMismatch()\":[{\"details\":\"reverts when there is not the same number of operation, to addresses, value, and data.\"}],\"ERC725X_InsufficientBalance(uint256,uint256)\":[{\"details\":\"reverts when trying to send more native tokens `value` than available in current `balance`.\",\"params\":{\"balance\":\"the balance of the ERC725X contract.\",\"value\":\"the amount of native tokens sent via `ERC725X.execute(...)`.\"}}],\"ERC725X_MsgValueDisallowedInDelegateCall()\":[{\"details\":\"the `value` parameter (= sending native tokens) is not allowed when making a delegatecall via `ERC725X.execute(...)` because msg.value is persisting.\"}],\"ERC725X_MsgValueDisallowedInStaticCall()\":[{\"details\":\"the `value` parameter (= sending native tokens) is not allowed when making a staticcall via `ERC725X.execute(...)` because sending native tokens is a state changing operation.\"}],\"ERC725X_NoContractBytecodeProvided()\":[{\"details\":\"reverts when no contract bytecode was provided as parameter when trying to deploy a contract via `ERC725X.execute(...)`, whether using operation type 1 (CREATE) or 2 (CREATE2).\"}],\"ERC725X_UnknownOperationType(uint256)\":[{\"details\":\"reverts when the `operationTypeProvided` is none of the default operation types available. (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\"}],\"ERC725Y_DataKeysValuesLengthMismatch(uint256,uint256)\":[{\"details\":\"reverts when there is not the same number of elements in the lists of data keys and data values when calling setData(bytes32[],bytes[]).\",\"params\":{\"dataKeysLength\":\"the number of data keys in the bytes32[] dataKeys\",\"dataValuesLength\":\"the number of data value in the bytes[] dataValue\"}}],\"NotInRenounceOwnershipInterval(uint256,uint256)\":[{\"details\":\"reverts when trying to renounce ownership before the initial confirmation delay\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Complete the process of transferring ownership. MUST be called by the pendingOwner.\"},\"execute(uint256,address,uint256,bytes)\":{\"details\":\"Executes any other smart contract. SHOULD only be callable by the owner of the contract set via ERC173 Emits a {Executed} event, when a call is executed under `operationType` 0, 3 and 4 Emits a {ContractCreated} event, when a contract is created under `operationType` 1 and 2 Emits a {ValueReceived} event, when receives native token\",\"params\":{\"data\":\"The call data, or the bytecode of the contract to deploy\",\"operationType\":\"The operation to execute: CALL = 0 CREATE = 1 CREATE2 = 2 STATICCALL = 3 DELEGATECALL = 4\",\"target\":\"The smart contract or address to interact with, `to` will be unused if a contract is created (operation 1 and 2)\",\"value\":\"The amount of native tokens to transfer (in Wei).\"}},\"execute(uint256[],address[],uint256[],bytes[])\":{\"details\":\"Emits a {ValueReceived} event when receiving native tokens.\",\"params\":{\"datas\":\"The list of call data, or the creation bytecode of the contract to deploy\",\"operationsType\":\"The list of operations type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4\",\"targets\":\"The list of addresses to call. `targets` will be unused if a contract is created (operation types 1 and 2).\",\"values\":\"The list of native token amounts to transfer (in Wei)\"}},\"getData(bytes32)\":{\"params\":{\"dataKey\":\"The key which value to retrieve\"},\"returns\":{\"dataValue\":\"The data stored at the key\"}},\"getData(bytes32[])\":{\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"dataHash\":\"hash of the data signed//Arbitrary length data signed on the behalf of address(this)\",\"signature\":\"owner's signature(s) of the data\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the current pending owner.\"},\"renounceOwnership()\":{\"details\":\"Renounce ownership of the contract in a 2-step process\"},\"setData(bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key to retrieve stored value\",\"dataValue\":\"The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\"}},\"setData(bytes32[],bytes[])\":{\"details\":\"Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\",\"params\":{\"dataKeys\":\"The array of data keys for values to set\",\"dataValues\":\"The array of values to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. If the contract doesn't support the `interfaceId`, it forwards the call to the `supportsInterface` extension according to LSP17, and checks if the extension implements the interface defined by `interfaceId`.\"},\"transferOwnership(address)\":{\"details\":\"Sets the pending owner and notifies the pending owner\",\"params\":{\"_newOwner\":\"The address nofied and set as `pendingOwner`\"}},\"universalReceiver(bytes32,bytes)\":{\"params\":{\"receivedData\":\"The data received.\",\"typeId\":\"The type of call received.\"},\"returns\":{\"returnedValues\":\"The ABI encoded return value of the LSP1UniversalReceiverDelegate call and the LSP1TypeIdDelegate call.\"}}},\"title\":\"Inheritable Proxy implementation of a LUKSO's Universal Profile based on LSP3\",\"version\":1},\"userdoc\":{\"events\":{\"ContractCreated(uint256,address,uint256,bytes32)\":{\"notice\":\"Emitted when deploying a contract\"},\"DataChanged(bytes32,bytes)\":{\"notice\":\"Emitted when data at a key is changed\"},\"Executed(uint256,address,uint256,bytes4)\":{\"notice\":\"Emitted when calling an address (EOA or contract)\"},\"UniversalReceiver(address,uint256,bytes32,bytes,bytes)\":{\"notice\":\"Emitted when the universalReceiver function is succesfully executed\"},\"ValueReceived(address,uint256)\":{\"notice\":\"Emitted when receiving native tokens\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Gets singular data at a given `dataKey`\"},\"getData(bytes32[])\":{\"notice\":\"Gets array of data for multiple given keys\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Checks if an owner signed `_data`. ERC1271 interface.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Sets singular data for a given `dataKey`\"},\"universalReceiver(bytes32,bytes)\":{\"notice\":\"Triggers the UniversalReceiver event when this function gets executed successfully. Forwards the call to the addresses stored in the ERC725Y storage under the LSP1UniversalReceiverDelegate Key and the typeId Key (param) respectively. The call will be discarded if no addresses were set.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniversalProfileInitAbstract.sol\":\"UniversalProfileInitAbstract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@erc725/=node_modules/@erc725/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"contracts/Custom/ERC165Checker.sol\":{\"keccak256\":\"0x08d1d2d4108eb4964940e619106e146f15a7cff65998f6d80795d3aa94c1374e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9843f7fa3c2743ae7dfeaa6df92295f6cbd30ce243728a2185bb3ec15244f549\",\"dweb:/ipfs/QmYTLjbcMYHAxSSMHCW81YTSySGXGo2TGwNQQaCjEMmowB\"]},\"contracts/LSP0ERC725Account/LSP0Constants.sol\":{\"keccak256\":\"0xe1a269b644f96fe7c89abe199832ba17239ba3a650a069881e75de9fd634ba04\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://054eff9745e8400f78ea870428ff858e95caa583352367ea020ff350ce3fd6c5\",\"dweb:/ipfs/QmRNHrwDh1DXCAtQi8Pg1XnkYK5b29ApcERVf4B3guE2nw\"]},\"contracts/LSP0ERC725Account/LSP0ERC725AccountCore.sol\":{\"keccak256\":\"0x5f5f7da8bc9c0b695184585514e298c0cb24612d3437ed1989cef8fb9570bdcc\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ac72b21d989b2e2f36bddf4b5797539d054d94de81cd5f7b750d9c9580ffe527\",\"dweb:/ipfs/QmaKnoBPvT46EEhCoyfRvQAkmfQPkm9A5jbw2B6q5tbpDw\"]},\"contracts/LSP0ERC725Account/LSP0ERC725AccountInitAbstract.sol\":{\"keccak256\":\"0x95781aef92e39175b6d134c60c0a8e913e2be9c592442a016ba6b46bbcf1b359\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d43e6b304ba00be549ff3247bc7b00cb96697ee331b1907731d9992a57c5b363\",\"dweb:/ipfs/QmYuNBJnkYXkVtpSk8pushdRwM69hFStKqMFULknoLLE2m\"]},\"contracts/LSP10ReceivedVaults/LSP10Constants.sol\":{\"keccak256\":\"0x26cfa7ca9a19e14671f75f5dc7cf3aa5dfa6bfb94727f1483987e3623936d3d0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://59dab496d5dc9d91d4b59376e53288a43a803b1d52625826a3a98055e6057463\",\"dweb:/ipfs/QmPDn5RpcmiwQur837Aod6Fxv1bhQ5juuErvDK9Kxbof2v\"]},\"contracts/LSP14Ownable2Step/ILSP14Ownable2Step.sol\":{\"keccak256\":\"0xccad089e2d5532ec1c13aa14f598289df270aff1cfb3605ff3ed41b84afcdc32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da66220e232bbf60284bd6c0da6b8cee57e9426636d8237cfa9dc9e0c638469e\",\"dweb:/ipfs/QmZoZ98U16t1btjE2ZUXhkn1EH9VfepHifYGsS7Rkf8EJq\"]},\"contracts/LSP14Ownable2Step/LSP14Constants.sol\":{\"keccak256\":\"0xbf1d2f2d3f30e6fa9350b129c5b71258cb66cee7db38716d25d944139b09a02f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bca88001f27edfdffdcf01d65830f88ff2ada312b5dd033914334bdda26518c5\",\"dweb:/ipfs/Qmd86PGqznDsJaXe3rmz6uUYPY8Fd8RfQP1hLvbQbv43QF\"]},\"contracts/LSP14Ownable2Step/LSP14Errors.sol\":{\"keccak256\":\"0xd7975493b71fdf7b5b7bafc9dffe614f5c3a6bb8c25bd062ce3de6cf675ab7c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://351e749d869cda789974c90e36cb2eb7cbab19561bf339d72eea65f5bc645650\",\"dweb:/ipfs/QmWbKabjnLzwNGndMdHbsuZzvkeosVp2nT2vZJbNfmbg2w\"]},\"contracts/LSP14Ownable2Step/LSP14Ownable2Step.sol\":{\"keccak256\":\"0xcdb5b555b99760efc8d55d4ca9eba04cee64da120c381b21b158f3c89613d264\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ee9a6f02297397e38b2a337697f213a1bef071c45ceb8196fcddc3674a61b09\",\"dweb:/ipfs/QmXrR9UpCXN2EBoECphYjSU61gpnEVEXjU5DvcuEPcbWtF\"]},\"contracts/LSP17ContractExtension/LSP17Constants.sol\":{\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://880c3b21e2090a14e7bba94ac5c8d4633e8a81d93c6f619454167a01dcc866d8\",\"dweb:/ipfs/QmZp6YVM4Eor5XtuXXqGRaPAJ3u5KCmLwuNRAGf4JY7sK1\"]},\"contracts/LSP17ContractExtension/LSP17Extendable.sol\":{\"keccak256\":\"0xb098c1528ccb3f0003fe793494ef4c5795e326984bf4a649e329b31074a33331\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://10e1dce264b8f1ce070fcdbfdc607607c2e1255c801a7cab48163bce9d2b7067\",\"dweb:/ipfs/QmNxEDANcMuP9bTgtcGRefbdgrtfK82RYUBtyukJ63qsFh\"]},\"contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\":{\"keccak256\":\"0x7fc821e27ddd75a0d0df28c3cd186a208f482ca378339750b8d3205fdb8f0cd8\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://75fab000a36459e01d5d83e8c7e52b887bcd073d93549544ca7b686378c8324c\",\"dweb:/ipfs/QmP6ygJifegRcA1oT54u8gPtTfF8fnMetTk33djzGq4f6B\"]},\"contracts/LSP1UniversalReceiver/LSP1Constants.sol\":{\"keccak256\":\"0xa6d5ec0a6825237692feeb924e1b04a806fd4bb60ff9ad0b0cc095273b6fcd26\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2e26916a74b5f241dd37d34d0ffdb68b1cbea094cadfbfe293558fffa09df9a2\",\"dweb:/ipfs/QmVbu6qdyf24s9ZSbXXkxDnqqnSwxCR31v8XrxmtdLggP7\"]},\"contracts/LSP1UniversalReceiver/LSP1Utils.sol\":{\"keccak256\":\"0xce25f8d0e7671462440553ce5096c45d96987aa88d97dfe2792cd35f51bc11b8\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6797bec98c63ea107ced84dba235c64704052fb3640965e4f0d946e9924ea1e7\",\"dweb:/ipfs/QmU2aRFSCrgkR5SJ6TNSJjj6wHxtArdpuThbFLVTvvLV1P\"]},\"contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol\":{\"keccak256\":\"0x845fe3fb8ebd55447da86efe2c5d6e7ae1b40ad25dcb01866ca55da5fc02b971\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9e3e2a9cd65c1b2c3b77508d3659b829af5eac34cc6611e0493a8cf7f5a58628\",\"dweb:/ipfs/QmbT4UfZgJmztNx9V7XZvKmuLmE6Er6Vmfphf3YeoZJPcG\"]},\"contracts/LSP3UniversalProfile/LSP3Constants.sol\":{\"keccak256\":\"0x1db00dc46e37d78aae0626bd2b5583a8027b689a2f3bc42546bb22f73004dd8a\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://6c0e8a321ac8da31195bcb18c0007effcf5f2984314fd88b14498f528c74afaf\",\"dweb:/ipfs/QmU3MTQazm3jAbKXCYR8f8VfeY93bnrLJ8Sz5PVRKKjcNz\"]},\"contracts/LSP5ReceivedAssets/LSP5Constants.sol\":{\"keccak256\":\"0xfad53fd7f6f576b203f9788f0a34a435b883f97f832af32894f298fd52085ba8\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7e76bfca670f2953e121ba71204823ffe902e2c2024030a7b102a26d7f89f9f5\",\"dweb:/ipfs/QmUaiZG7TJXLt9KmmUWoNGucrE2fsM1e9TMa3XZWPt9udC\"]},\"contracts/LSP7DigitalAsset/LSP7Constants.sol\":{\"keccak256\":\"0x198bdf359a3e77ccd96ab1ddaac69160482ddbc30582c616b657b43442c8aea1\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://13fbd4e7ff24b7f8b1a3666c19f9e2648c9f9f357bb80cd8a09ee89d05921056\",\"dweb:/ipfs/QmRToHBUAzPeEfYzGFbaC8a5VxZgwh2Z8BWKdhuj91U6uz\"]},\"contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol\":{\"keccak256\":\"0x90a52f418af3823bf068b440edfc98e5302047c30626ebb9bb224b53bf05e7c2\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://ad13e39c23c4dbd0c095084a3105b5a5331a4aaeed255836c20d775231d52f6a\",\"dweb:/ipfs/QmNusjgxqvk87vbvejCAtqnv83gnkJxkK1DqgiGb74Jgqp\"]},\"contracts/LSP9Vault/LSP9Constants.sol\":{\"keccak256\":\"0xf8df52ebed8c9682764628231e315700c2b6b700790567a1a11258795ef0c274\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://8dcb01da4ad1811ce538bdfbe3572111f52cf1978441fb5bcd9903a5285dce46\",\"dweb:/ipfs/Qmf32iJFQYKVFxsfBo3tTrJWD5sRnhoPwGH3bDyFTCW4au\"]},\"contracts/UniversalProfileInitAbstract.sol\":{\"keccak256\":\"0x5934cf2ab6d63e33f48fd136216f7fb0024b059172856be33e6ae6f054a3236c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://72cd25d6bed6586d90766190992fcfc6ceefbf3f9391ac50477630ff845025f4\",\"dweb:/ipfs/QmcueGAp4L8HUgvSfXYSsXwVpt25ypvC6WtdA9qRcZkUDW\"]},\"node_modules/@erc725/smart-contracts/contracts/ERC725XCore.sol\":{\"keccak256\":\"0xe88f29873249b0cc1729e6bf63e993e4f6c7c4930753ab1a6769aa95452fb061\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://820d7e23799201d8d4dae26184c78af2316e8b5485fae4097bfce12521454b3e\",\"dweb:/ipfs/Qme7UEyUxUukzsuQBCuAnEeBryRNt8xAcPRXzaGDRGUfDp\"]},\"node_modules/@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"keccak256\":\"0xc02f97a3a08b659e4c2d00735b0cbb6d8ab3759693b893fcc3f1213e8f5b2ca6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7d66151e33557a89dcb19c2088b3d6a263d4678b3a3aa2f9b2b336739b506f7b\",\"dweb:/ipfs/QmZQByTDXFXQyAbXHRN592YiggdZc1JvzBG3eXLVNfaW6C\"]},\"node_modules/@erc725/smart-contracts/contracts/constants.sol\":{\"keccak256\":\"0x3f5b99fbe4cfb947060d3fe735cbe49aa485123417c3a1a425f3bc19ff2da3cb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8403c8f3fe0ffb697a9eb170db340ed2873a7a98cbbd913dcb20cabf67327834\",\"dweb:/ipfs/QmXvmrVMGaNbdS1VdLgKB1RNiPLWCtcUXqfXHz3i9C5XUD\"]},\"node_modules/@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"keccak256\":\"0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc4186cf3bffd2b00017463ead8dfdef4c09e47fa943788beec42c4b66253f9e\",\"dweb:/ipfs/QmXvQwkdxHjUJzfs8P86JJbS3aqSgXhxKt4zYSkjW3hnqP\"]},\"node_modules/@erc725/smart-contracts/contracts/errors.sol\":{\"keccak256\":\"0x2f317b1e5f3caa2ffaa26fa6abf483b310c92d7a579207c6febde37422913548\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://440d47addc1cc1cd991c2be80522e3086c8470d3f739387dc81c2920df905089\",\"dweb:/ipfs/QmW64dnj9LAutsgc5sjm35tkgjVWVF236Dy1UXvWczoXFZ\"]},\"node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol\":{\"keccak256\":\"0x5ad1db3b879f7bdc9777bb2bc1f2f58f9a9d41032eab9f70cee9b5ebbbea9a17\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://0914c73bf23f1d954a6704fe454a75b413067371f61c4ad600aa32ef65619f30\",\"dweb:/ipfs/QmYSxfQuaey1P1jpVRa97RVGn32xGM19jZTVSGobFJWtUP\"]},\"node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"keccak256\":\"0x61689c193b68a7f29a9a4cef38d82c6ec5e2b0036e3d8d4cabd6d68ee1eb0142\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://c48adc3fe4b11578339f0fa75839917948e657cdb925956e5b2b01612dfed1c6\",\"dweb:/ipfs/QmcgEaUqFWW3ygbNEKQ9xtfk9SXEAen9eGTXVTieExm5JV\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"node_modules/@openzeppelin/contracts/utils/Create2.sol\":{\"keccak256\":\"0x62237e1773cbf99739b7019f3772a2ff5360d56edb69751b513237f5fcd78571\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f39caaa49151a341d9c258a5b7308856d11c8cf349062314eea1e2251f0d1918\",\"dweb:/ipfs/QmcJqGdrHEdiBfB5zuA3ykY1wc2LDNtz8Y88HPEscJe71G\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"node_modules/solidity-bytes-utils/contracts/BytesLib.sol\":{\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014\",\"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "CannotTransferOwnershipToSelf"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC725X_ContractDeploymentFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC725X_CreateOperationsRequireEmptyRecipientAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC725X_ExecuteParametersLengthMismatch"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC725X_InsufficientBalance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC725X_MsgValueDisallowedInDelegateCall"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC725X_MsgValueDisallowedInStaticCall"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC725X_NoContractBytecodeProvided"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationTypeProvided",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC725X_UnknownOperationType"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "dataKeysLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dataValuesLength",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC725Y_DataKeysValuesLengthMismatch"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "renounceOwnershipStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renounceOwnershipEnd",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "NotInRenounceOwnershipInterval"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationType",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DataChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationType",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Executed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "OwnershipRenounced",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferStarted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "RenounceOwnershipInitiated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "typeId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes",
              "name": "receivedData",
              "type": "bytes",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "returnedValue",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "UniversalReceiver",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ValueReceived",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "fallback"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "operationsType",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "datas",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "dataKeys",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getData",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "dataValues",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "dataKeys",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "dataValues",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setData"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setData"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "typeId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "receivedData",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "universalReceiver",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "returnedValues",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptOwnership()": {
            "details": "Complete the process of transferring ownership. MUST be called by the pendingOwner."
          },
          "execute(uint256,address,uint256,bytes)": {
            "details": "Executes any other smart contract. SHOULD only be callable by the owner of the contract set via ERC173 Emits a {Executed} event, when a call is executed under `operationType` 0, 3 and 4 Emits a {ContractCreated} event, when a contract is created under `operationType` 1 and 2 Emits a {ValueReceived} event, when receives native token",
            "params": {
              "data": "The call data, or the bytecode of the contract to deploy",
              "operationType": "The operation to execute: CALL = 0 CREATE = 1 CREATE2 = 2 STATICCALL = 3 DELEGATECALL = 4",
              "target": "The smart contract or address to interact with, `to` will be unused if a contract is created (operation 1 and 2)",
              "value": "The amount of native tokens to transfer (in Wei)."
            }
          },
          "execute(uint256[],address[],uint256[],bytes[])": {
            "details": "Emits a {ValueReceived} event when receiving native tokens.",
            "params": {
              "datas": "The list of call data, or the creation bytecode of the contract to deploy",
              "operationsType": "The list of operations type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4",
              "targets": "The list of addresses to call. `targets` will be unused if a contract is created (operation types 1 and 2).",
              "values": "The list of native token amounts to transfer (in Wei)"
            }
          },
          "getData(bytes32)": {
            "params": {
              "dataKey": "The key which value to retrieve"
            },
            "returns": {
              "dataValue": "The data stored at the key"
            }
          },
          "getData(bytes32[])": {
            "params": {
              "dataKeys": "The array of keys which values to retrieve"
            },
            "returns": {
              "dataValues": "The array of data stored at multiple keys"
            }
          },
          "isValidSignature(bytes32,bytes)": {
            "params": {
              "dataHash": "hash of the data signed//Arbitrary length data signed on the behalf of address(this)",
              "signature": "owner's signature(s) of the data"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pendingOwner()": {
            "details": "Returns the address of the current pending owner."
          },
          "renounceOwnership()": {
            "details": "Renounce ownership of the contract in a 2-step process"
          },
          "setData(bytes32,bytes)": {
            "params": {
              "dataKey": "The key to retrieve stored value",
              "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event."
            }
          },
          "setData(bytes32[],bytes[])": {
            "details": "Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.",
            "params": {
              "dataKeys": "The array of data keys for values to set",
              "dataValues": "The array of values to set"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. If the contract doesn't support the `interfaceId`, it forwards the call to the `supportsInterface` extension according to LSP17, and checks if the extension implements the interface defined by `interfaceId`."
          },
          "transferOwnership(address)": {
            "details": "Sets the pending owner and notifies the pending owner",
            "params": {
              "_newOwner": "The address nofied and set as `pendingOwner`"
            }
          },
          "universalReceiver(bytes32,bytes)": {
            "params": {
              "receivedData": "The data received.",
              "typeId": "The type of call received."
            },
            "returns": {
              "returnedValues": "The ABI encoded return value of the LSP1UniversalReceiverDelegate call and the LSP1TypeIdDelegate call."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getData(bytes32)": {
            "notice": "Gets singular data at a given `dataKey`"
          },
          "getData(bytes32[])": {
            "notice": "Gets array of data for multiple given keys"
          },
          "isValidSignature(bytes32,bytes)": {
            "notice": "Checks if an owner signed `_data`. ERC1271 interface."
          },
          "setData(bytes32,bytes)": {
            "notice": "Sets singular data for a given `dataKey`"
          },
          "universalReceiver(bytes32,bytes)": {
            "notice": "Triggers the UniversalReceiver event when this function gets executed successfully. Forwards the call to the addresses stored in the ERC725Y storage under the LSP1UniversalReceiverDelegate Key and the typeId Key (param) respectively. The call will be discarded if no addresses were set."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@erc725/=node_modules/@erc725/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":solidity-bytes-utils/=node_modules/solidity-bytes-utils/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/UniversalProfileInitAbstract.sol": "UniversalProfileInitAbstract"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/Custom/ERC165Checker.sol": {
        "keccak256": "0x08d1d2d4108eb4964940e619106e146f15a7cff65998f6d80795d3aa94c1374e",
        "urls": [
          "bzz-raw://9843f7fa3c2743ae7dfeaa6df92295f6cbd30ce243728a2185bb3ec15244f549",
          "dweb:/ipfs/QmYTLjbcMYHAxSSMHCW81YTSySGXGo2TGwNQQaCjEMmowB"
        ],
        "license": "MIT"
      },
      "contracts/LSP0ERC725Account/LSP0Constants.sol": {
        "keccak256": "0xe1a269b644f96fe7c89abe199832ba17239ba3a650a069881e75de9fd634ba04",
        "urls": [
          "bzz-raw://054eff9745e8400f78ea870428ff858e95caa583352367ea020ff350ce3fd6c5",
          "dweb:/ipfs/QmRNHrwDh1DXCAtQi8Pg1XnkYK5b29ApcERVf4B3guE2nw"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP0ERC725Account/LSP0ERC725AccountCore.sol": {
        "keccak256": "0x5f5f7da8bc9c0b695184585514e298c0cb24612d3437ed1989cef8fb9570bdcc",
        "urls": [
          "bzz-raw://ac72b21d989b2e2f36bddf4b5797539d054d94de81cd5f7b750d9c9580ffe527",
          "dweb:/ipfs/QmaKnoBPvT46EEhCoyfRvQAkmfQPkm9A5jbw2B6q5tbpDw"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP0ERC725Account/LSP0ERC725AccountInitAbstract.sol": {
        "keccak256": "0x95781aef92e39175b6d134c60c0a8e913e2be9c592442a016ba6b46bbcf1b359",
        "urls": [
          "bzz-raw://d43e6b304ba00be549ff3247bc7b00cb96697ee331b1907731d9992a57c5b363",
          "dweb:/ipfs/QmYuNBJnkYXkVtpSk8pushdRwM69hFStKqMFULknoLLE2m"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP10ReceivedVaults/LSP10Constants.sol": {
        "keccak256": "0x26cfa7ca9a19e14671f75f5dc7cf3aa5dfa6bfb94727f1483987e3623936d3d0",
        "urls": [
          "bzz-raw://59dab496d5dc9d91d4b59376e53288a43a803b1d52625826a3a98055e6057463",
          "dweb:/ipfs/QmPDn5RpcmiwQur837Aod6Fxv1bhQ5juuErvDK9Kxbof2v"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP14Ownable2Step/ILSP14Ownable2Step.sol": {
        "keccak256": "0xccad089e2d5532ec1c13aa14f598289df270aff1cfb3605ff3ed41b84afcdc32",
        "urls": [
          "bzz-raw://da66220e232bbf60284bd6c0da6b8cee57e9426636d8237cfa9dc9e0c638469e",
          "dweb:/ipfs/QmZoZ98U16t1btjE2ZUXhkn1EH9VfepHifYGsS7Rkf8EJq"
        ],
        "license": "MIT"
      },
      "contracts/LSP14Ownable2Step/LSP14Constants.sol": {
        "keccak256": "0xbf1d2f2d3f30e6fa9350b129c5b71258cb66cee7db38716d25d944139b09a02f",
        "urls": [
          "bzz-raw://bca88001f27edfdffdcf01d65830f88ff2ada312b5dd033914334bdda26518c5",
          "dweb:/ipfs/Qmd86PGqznDsJaXe3rmz6uUYPY8Fd8RfQP1hLvbQbv43QF"
        ],
        "license": "MIT"
      },
      "contracts/LSP14Ownable2Step/LSP14Errors.sol": {
        "keccak256": "0xd7975493b71fdf7b5b7bafc9dffe614f5c3a6bb8c25bd062ce3de6cf675ab7c3",
        "urls": [
          "bzz-raw://351e749d869cda789974c90e36cb2eb7cbab19561bf339d72eea65f5bc645650",
          "dweb:/ipfs/QmWbKabjnLzwNGndMdHbsuZzvkeosVp2nT2vZJbNfmbg2w"
        ],
        "license": "MIT"
      },
      "contracts/LSP14Ownable2Step/LSP14Ownable2Step.sol": {
        "keccak256": "0xcdb5b555b99760efc8d55d4ca9eba04cee64da120c381b21b158f3c89613d264",
        "urls": [
          "bzz-raw://0ee9a6f02297397e38b2a337697f213a1bef071c45ceb8196fcddc3674a61b09",
          "dweb:/ipfs/QmXrR9UpCXN2EBoECphYjSU61gpnEVEXjU5DvcuEPcbWtF"
        ],
        "license": "MIT"
      },
      "contracts/LSP17ContractExtension/LSP17Constants.sol": {
        "keccak256": "0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036",
        "urls": [
          "bzz-raw://880c3b21e2090a14e7bba94ac5c8d4633e8a81d93c6f619454167a01dcc866d8",
          "dweb:/ipfs/QmZp6YVM4Eor5XtuXXqGRaPAJ3u5KCmLwuNRAGf4JY7sK1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP17ContractExtension/LSP17Extendable.sol": {
        "keccak256": "0xb098c1528ccb3f0003fe793494ef4c5795e326984bf4a649e329b31074a33331",
        "urls": [
          "bzz-raw://10e1dce264b8f1ce070fcdbfdc607607c2e1255c801a7cab48163bce9d2b7067",
          "dweb:/ipfs/QmNxEDANcMuP9bTgtcGRefbdgrtfK82RYUBtyukJ63qsFh"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol": {
        "keccak256": "0x7fc821e27ddd75a0d0df28c3cd186a208f482ca378339750b8d3205fdb8f0cd8",
        "urls": [
          "bzz-raw://75fab000a36459e01d5d83e8c7e52b887bcd073d93549544ca7b686378c8324c",
          "dweb:/ipfs/QmP6ygJifegRcA1oT54u8gPtTfF8fnMetTk33djzGq4f6B"
        ],
        "license": "CC0-1.0"
      },
      "contracts/LSP1UniversalReceiver/LSP1Constants.sol": {
        "keccak256": "0xa6d5ec0a6825237692feeb924e1b04a806fd4bb60ff9ad0b0cc095273b6fcd26",
        "urls": [
          "bzz-raw://2e26916a74b5f241dd37d34d0ffdb68b1cbea094cadfbfe293558fffa09df9a2",
          "dweb:/ipfs/QmVbu6qdyf24s9ZSbXXkxDnqqnSwxCR31v8XrxmtdLggP7"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP1UniversalReceiver/LSP1Utils.sol": {
        "keccak256": "0xce25f8d0e7671462440553ce5096c45d96987aa88d97dfe2792cd35f51bc11b8",
        "urls": [
          "bzz-raw://6797bec98c63ea107ced84dba235c64704052fb3640965e4f0d946e9924ea1e7",
          "dweb:/ipfs/QmU2aRFSCrgkR5SJ6TNSJjj6wHxtArdpuThbFLVTvvLV1P"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol": {
        "keccak256": "0x845fe3fb8ebd55447da86efe2c5d6e7ae1b40ad25dcb01866ca55da5fc02b971",
        "urls": [
          "bzz-raw://9e3e2a9cd65c1b2c3b77508d3659b829af5eac34cc6611e0493a8cf7f5a58628",
          "dweb:/ipfs/QmbT4UfZgJmztNx9V7XZvKmuLmE6Er6Vmfphf3YeoZJPcG"
        ],
        "license": "GPL-3.0"
      },
      "contracts/LSP3UniversalProfile/LSP3Constants.sol": {
        "keccak256": "0x1db00dc46e37d78aae0626bd2b5583a8027b689a2f3bc42546bb22f73004dd8a",
        "urls": [
          "bzz-raw://6c0e8a321ac8da31195bcb18c0007effcf5f2984314fd88b14498f528c74afaf",
          "dweb:/ipfs/QmU3MTQazm3jAbKXCYR8f8VfeY93bnrLJ8Sz5PVRKKjcNz"
        ],
        "license": "CC0-1.0"
      },
      "contracts/LSP5ReceivedAssets/LSP5Constants.sol": {
        "keccak256": "0xfad53fd7f6f576b203f9788f0a34a435b883f97f832af32894f298fd52085ba8",
        "urls": [
          "bzz-raw://7e76bfca670f2953e121ba71204823ffe902e2c2024030a7b102a26d7f89f9f5",
          "dweb:/ipfs/QmUaiZG7TJXLt9KmmUWoNGucrE2fsM1e9TMa3XZWPt9udC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP7DigitalAsset/LSP7Constants.sol": {
        "keccak256": "0x198bdf359a3e77ccd96ab1ddaac69160482ddbc30582c616b657b43442c8aea1",
        "urls": [
          "bzz-raw://13fbd4e7ff24b7f8b1a3666c19f9e2648c9f9f357bb80cd8a09ee89d05921056",
          "dweb:/ipfs/QmRToHBUAzPeEfYzGFbaC8a5VxZgwh2Z8BWKdhuj91U6uz"
        ],
        "license": "CC0-1.0"
      },
      "contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol": {
        "keccak256": "0x90a52f418af3823bf068b440edfc98e5302047c30626ebb9bb224b53bf05e7c2",
        "urls": [
          "bzz-raw://ad13e39c23c4dbd0c095084a3105b5a5331a4aaeed255836c20d775231d52f6a",
          "dweb:/ipfs/QmNusjgxqvk87vbvejCAtqnv83gnkJxkK1DqgiGb74Jgqp"
        ],
        "license": "CC0-1.0"
      },
      "contracts/LSP9Vault/LSP9Constants.sol": {
        "keccak256": "0xf8df52ebed8c9682764628231e315700c2b6b700790567a1a11258795ef0c274",
        "urls": [
          "bzz-raw://8dcb01da4ad1811ce538bdfbe3572111f52cf1978441fb5bcd9903a5285dce46",
          "dweb:/ipfs/Qmf32iJFQYKVFxsfBo3tTrJWD5sRnhoPwGH3bDyFTCW4au"
        ],
        "license": "CC0-1.0"
      },
      "contracts/UniversalProfileInitAbstract.sol": {
        "keccak256": "0x5934cf2ab6d63e33f48fd136216f7fb0024b059172856be33e6ae6f054a3236c",
        "urls": [
          "bzz-raw://72cd25d6bed6586d90766190992fcfc6ceefbf3f9391ac50477630ff845025f4",
          "dweb:/ipfs/QmcueGAp4L8HUgvSfXYSsXwVpt25ypvC6WtdA9qRcZkUDW"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/ERC725XCore.sol": {
        "keccak256": "0xe88f29873249b0cc1729e6bf63e993e4f6c7c4930753ab1a6769aa95452fb061",
        "urls": [
          "bzz-raw://820d7e23799201d8d4dae26184c78af2316e8b5485fae4097bfce12521454b3e",
          "dweb:/ipfs/Qme7UEyUxUukzsuQBCuAnEeBryRNt8xAcPRXzaGDRGUfDp"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/ERC725YCore.sol": {
        "keccak256": "0xc02f97a3a08b659e4c2d00735b0cbb6d8ab3759693b893fcc3f1213e8f5b2ca6",
        "urls": [
          "bzz-raw://7d66151e33557a89dcb19c2088b3d6a263d4678b3a3aa2f9b2b336739b506f7b",
          "dweb:/ipfs/QmZQByTDXFXQyAbXHRN592YiggdZc1JvzBG3eXLVNfaW6C"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/constants.sol": {
        "keccak256": "0x3f5b99fbe4cfb947060d3fe735cbe49aa485123417c3a1a425f3bc19ff2da3cb",
        "urls": [
          "bzz-raw://8403c8f3fe0ffb697a9eb170db340ed2873a7a98cbbd913dcb20cabf67327834",
          "dweb:/ipfs/QmXvmrVMGaNbdS1VdLgKB1RNiPLWCtcUXqfXHz3i9C5XUD"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/custom/OwnableUnset.sol": {
        "keccak256": "0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf",
        "urls": [
          "bzz-raw://bc4186cf3bffd2b00017463ead8dfdef4c09e47fa943788beec42c4b66253f9e",
          "dweb:/ipfs/QmXvQwkdxHjUJzfs8P86JJbS3aqSgXhxKt4zYSkjW3hnqP"
        ],
        "license": "MIT"
      },
      "node_modules/@erc725/smart-contracts/contracts/errors.sol": {
        "keccak256": "0x2f317b1e5f3caa2ffaa26fa6abf483b310c92d7a579207c6febde37422913548",
        "urls": [
          "bzz-raw://440d47addc1cc1cd991c2be80522e3086c8470d3f739387dc81c2920df905089",
          "dweb:/ipfs/QmW64dnj9LAutsgc5sjm35tkgjVWVF236Dy1UXvWczoXFZ"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol": {
        "keccak256": "0x5ad1db3b879f7bdc9777bb2bc1f2f58f9a9d41032eab9f70cee9b5ebbbea9a17",
        "urls": [
          "bzz-raw://0914c73bf23f1d954a6704fe454a75b413067371f61c4ad600aa32ef65619f30",
          "dweb:/ipfs/QmYSxfQuaey1P1jpVRa97RVGn32xGM19jZTVSGobFJWtUP"
        ],
        "license": "CC0-1.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
        "keccak256": "0x61689c193b68a7f29a9a4cef38d82c6ec5e2b0036e3d8d4cabd6d68ee1eb0142",
        "urls": [
          "bzz-raw://c48adc3fe4b11578339f0fa75839917948e657cdb925956e5b2b01612dfed1c6",
          "dweb:/ipfs/QmcgEaUqFWW3ygbNEKQ9xtfk9SXEAen9eGTXVTieExm5JV"
        ],
        "license": "CC0-1.0"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Create2.sol": {
        "keccak256": "0x62237e1773cbf99739b7019f3772a2ff5360d56edb69751b513237f5fcd78571",
        "urls": [
          "bzz-raw://f39caaa49151a341d9c258a5b7308856d11c8cf349062314eea1e2251f0d1918",
          "dweb:/ipfs/QmcJqGdrHEdiBfB5zuA3ykY1wc2LDNtz8Y88HPEscJe71G"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
        "urls": [
          "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
          "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "node_modules/solidity-bytes-utils/contracts/BytesLib.sol": {
        "keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
        "urls": [
          "bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
          "dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
        ],
        "license": "Unlicense"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/UniversalProfileInitAbstract.sol",
    "id": 17904,
    "exportedSymbols": {
      "LSP0ERC725AccountInitAbstract": [
        958
      ],
      "UniversalProfileInitAbstract": [
        17903
      ],
      "_LSP3_SUPPORTED_STANDARDS_KEY": [
        3982
      ],
      "_LSP3_SUPPORTED_STANDARDS_VALUE": [
        3985
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:883:155",
    "nodes": [
      {
        "id": 17874,
        "nodeType": "PragmaDirective",
        "src": "39:23:155",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ]
      },
      {
        "id": 17876,
        "nodeType": "ImportDirective",
        "src": "75:100:155",
        "nodes": [],
        "absolutePath": "contracts/LSP0ERC725Account/LSP0ERC725AccountInitAbstract.sol",
        "file": "./LSP0ERC725Account/LSP0ERC725AccountInitAbstract.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 17904,
        "sourceUnit": 959,
        "symbolAliases": [
          {
            "foreign": {
              "id": 17875,
              "name": "LSP0ERC725AccountInitAbstract",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 958,
              "src": "83:29:155",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 17879,
        "nodeType": "ImportDirective",
        "src": "190:130:155",
        "nodes": [],
        "absolutePath": "contracts/LSP3UniversalProfile/LSP3Constants.sol",
        "file": "./LSP3UniversalProfile/LSP3Constants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 17904,
        "sourceUnit": 3989,
        "symbolAliases": [
          {
            "foreign": {
              "id": 17877,
              "name": "_LSP3_SUPPORTED_STANDARDS_KEY",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3982,
              "src": "203:29:155",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 17878,
              "name": "_LSP3_SUPPORTED_STANDARDS_VALUE",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3985,
              "src": "238:31:155",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 17903,
        "nodeType": "ContractDefinition",
        "src": "541:380:155",
        "nodes": [
          {
            "id": 17902,
            "nodeType": "FunctionDefinition",
            "src": "627:292:155",
            "nodes": [],
            "body": {
              "id": 17901,
              "nodeType": "Block",
              "src": "709:210:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17893,
                        "name": "newOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17884,
                        "src": "761:8:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 17890,
                        "name": "LSP0ERC725AccountInitAbstract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 958,
                        "src": "719:29:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LSP0ERC725AccountInitAbstract_$958_$",
                          "typeString": "type(contract LSP0ERC725AccountInitAbstract)"
                        }
                      },
                      "id": 17892,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "749:11:155",
                      "memberName": "_initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 957,
                      "src": "719:41:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 17894,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "719:51:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17895,
                  "nodeType": "ExpressionStatement",
                  "src": "719:51:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17897,
                        "name": "_LSP3_SUPPORTED_STANDARDS_KEY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3982,
                        "src": "849:29:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 17898,
                        "name": "_LSP3_SUPPORTED_STANDARDS_VALUE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3985,
                        "src": "880:31:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 17896,
                      "name": "_setData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        886
                      ],
                      "referencedDeclaration": 886,
                      "src": "840:8:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes32,bytes memory)"
                      }
                    },
                    "id": 17899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "840:72:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17900,
                  "nodeType": "ExpressionStatement",
                  "src": "840:72:155"
                }
              ]
            },
            "baseFunctions": [
              957
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17888,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17887,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "692:16:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 43954,
                  "src": "692:16:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "692:16:155"
              }
            ],
            "name": "_initialize",
            "nameLocation": "636:11:155",
            "overrides": {
              "id": 17886,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "683:8:155"
            },
            "parameters": {
              "id": 17885,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17884,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "656:8:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 17902,
                  "src": "648:16:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 17883,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "648:7:155",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "647:18:155"
            },
            "returnParameters": {
              "id": 17889,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "709:0:155"
            },
            "scope": 17903,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 17881,
              "name": "LSP0ERC725AccountInitAbstract",
              "nameLocations": [
                "591:29:155"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 958,
              "src": "591:29:155"
            },
            "id": 17882,
            "nodeType": "InheritanceSpecifier",
            "src": "591:29:155"
          }
        ],
        "canonicalName": "UniversalProfileInitAbstract",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 17880,
          "nodeType": "StructuredDocumentation",
          "src": "322:218:155",
          "text": " @title Inheritable Proxy implementation of a LUKSO's Universal Profile based on LSP3\n @author Fabian Vogelsteller <fabian@lukso.network>\n @dev Implementation of the ERC725Account + LSP1 universalReceiver"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          17903,
          958,
          887,
          2377,
          44248,
          2234,
          1791,
          43508,
          43840,
          43250,
          43789,
          46531,
          46594,
          43687,
          1511,
          43991
        ],
        "name": "UniversalProfileInitAbstract",
        "nameLocation": "559:28:155",
        "scope": 17904,
        "usedErrors": [
          1534,
          1537,
          43696,
          43701,
          43704,
          43707,
          43710,
          43713,
          43716,
          43719,
          43726
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 155
}