{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operationType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operationType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "operationsType",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "operationType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "execute(uint256,address,uint256,bytes)": "44c028fe",
    "execute(uint256[],address[],uint256[],bytes[])": "13ced88d",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operationType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operationType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"operationsType\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operationType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC725X provides the ability to call arbitrary functions at any other smart contract and itself, including using `delegatecall`, `staticcall`, as well as creating contracts using `create` and `create2` This is the basis for a smart contract based account system, but could also be used as a proxy account system\",\"events\":{\"ContractCreated(uint256,address,uint256,bytes32)\":{\"params\":{\"contractAddress\":\"The created contract address\",\"operationType\":\"The opcode used to deploy the contract (CREATE or CREATE2)\",\"value\":\"The amount of native tokens (in Wei) sent to fund the created contract address\"}},\"Executed(uint256,address,uint256,bytes4)\":{\"params\":{\"operationType\":\"The low-level call opcode used to call the `to` address (CALL, STATICALL or DELEGATECALL)\",\"selector\":\"The first 4 bytes (= function selector) of the data sent with the call\",\"target\":\"The address to call. `target` will be unused if a contract is created (operation types 1 and 2).\",\"value\":\"The amount of native tokens transferred with the call (in Wei)\"}}},\"kind\":\"dev\",\"methods\":{\"execute(uint256,address,uint256,bytes)\":{\"details\":\"Generic executor function to: - send native tokens to any address. - interact with any contract by passing an abi-encoded function call in the `data` parameter. - deploy a contract by providing its creation bytecode in the `data` parameter. Requirements: - SHOULD only be callable by the owner of the contract set via ERC173. - if a `value` is provided, the contract MUST have at least this amount in its balance to execute successfully. - if the operation type is STATICCALL or DELEGATECALL, `value` SHOULD be 0. - `target` SHOULD be address(0) when deploying a contract. Emits an {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL) Emits a {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)\",\"params\":{\"data\":\"The call data, or the creation bytecode of the contract to deploy\",\"operationType\":\"The operation type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4\",\"target\":\"The address of the EOA or smart contract.  (unused if a contract is created via operation type 1 or 2)\",\"value\":\"The amount of native tokens to transfer (in Wei)\"}},\"execute(uint256[],address[],uint256[],bytes[])\":{\"details\":\"Generic batch executor function to: - send native tokens to any address. - interact with any contract by passing an abi-encoded function call in the `datas` parameter. - deploy a contract by providing its creation bytecode in the `datas` parameter. Requirements: - The length of the parameters provided MUST be equal - SHOULD only be callable by the owner of the contract set via ERC173. - if a `values` is provided, the contract MUST have at least this amount in its balance to execute successfully. - if the operation type is STATICCALL or DELEGATECALL, `values` SHOULD be 0. - `targets` SHOULD be address(0) when deploying a contract. Emits an {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL) Emits a {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)\",\"params\":{\"datas\":\"The list of call data, or the creation bytecode of the contract to deploy\",\"operationsType\":\"The list of operations type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4\",\"targets\":\"The list of addresses to call. `targets` will be unused if a contract is created (operation types 1 and 2).\",\"values\":\"The list of native token amounts to transfer (in Wei)\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The interface for ERC725X General executor\",\"version\":1},\"userdoc\":{\"events\":{\"ContractCreated(uint256,address,uint256,bytes32)\":{\"notice\":\"Emitted when deploying a contract\"},\"Executed(uint256,address,uint256,bytes4)\":{\"notice\":\"Emitted when calling an address (EOA or contract)\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol\":\"IERC725X\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@erc725/=node_modules/@erc725/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol\":{\"keccak256\":\"0x5ad1db3b879f7bdc9777bb2bc1f2f58f9a9d41032eab9f70cee9b5ebbbea9a17\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://0914c73bf23f1d954a6704fe454a75b413067371f61c4ad600aa32ef65619f30\",\"dweb:/ipfs/QmYSxfQuaey1P1jpVRa97RVGn32xGM19jZTVSGobFJWtUP\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationType",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationType",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Executed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "operationsType",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "datas",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "operationType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "execute(uint256,address,uint256,bytes)": {
            "details": "Generic executor function to: - send native tokens to any address. - interact with any contract by passing an abi-encoded function call in the `data` parameter. - deploy a contract by providing its creation bytecode in the `data` parameter. Requirements: - SHOULD only be callable by the owner of the contract set via ERC173. - if a `value` is provided, the contract MUST have at least this amount in its balance to execute successfully. - if the operation type is STATICCALL or DELEGATECALL, `value` SHOULD be 0. - `target` SHOULD be address(0) when deploying a contract. Emits an {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL) Emits a {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)",
            "params": {
              "data": "The call data, or the creation bytecode of the contract to deploy",
              "operationType": "The operation type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4",
              "target": "The address of the EOA or smart contract.  (unused if a contract is created via operation type 1 or 2)",
              "value": "The amount of native tokens to transfer (in Wei)"
            }
          },
          "execute(uint256[],address[],uint256[],bytes[])": {
            "details": "Generic batch executor function to: - send native tokens to any address. - interact with any contract by passing an abi-encoded function call in the `datas` parameter. - deploy a contract by providing its creation bytecode in the `datas` parameter. Requirements: - The length of the parameters provided MUST be equal - SHOULD only be callable by the owner of the contract set via ERC173. - if a `values` is provided, the contract MUST have at least this amount in its balance to execute successfully. - if the operation type is STATICCALL or DELEGATECALL, `values` SHOULD be 0. - `targets` SHOULD be address(0) when deploying a contract. Emits an {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL) Emits a {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)",
            "params": {
              "datas": "The list of call data, or the creation bytecode of the contract to deploy",
              "operationsType": "The list of operations type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4",
              "targets": "The list of addresses to call. `targets` will be unused if a contract is created (operation types 1 and 2).",
              "values": "The list of native token amounts to transfer (in Wei)"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@erc725/=node_modules/@erc725/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":solidity-bytes-utils/=node_modules/solidity-bytes-utils/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol": "IERC725X"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol": {
        "keccak256": "0x5ad1db3b879f7bdc9777bb2bc1f2f58f9a9d41032eab9f70cee9b5ebbbea9a17",
        "urls": [
          "bzz-raw://0914c73bf23f1d954a6704fe454a75b413067371f61c4ad600aa32ef65619f30",
          "dweb:/ipfs/QmYSxfQuaey1P1jpVRa97RVGn32xGM19jZTVSGobFJWtUP"
        ],
        "license": "CC0-1.0"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol",
    "id": 43790,
    "exportedSymbols": {
      "IERC165": [
        46594
      ],
      "IERC725X": [
        43789
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:4800:179",
    "nodes": [
      {
        "id": 43728,
        "nodeType": "PragmaDirective",
        "src": "36:23:179",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 43730,
        "nodeType": "ImportDirective",
        "src": "75:80:179",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 43790,
        "sourceUnit": 46595,
        "symbolAliases": [
          {
            "foreign": {
              "id": 43729,
              "name": "IERC165",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46594,
              "src": "83:7:179",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 43789,
        "nodeType": "ContractDefinition",
        "src": "544:4291:179",
        "nodes": [
          {
            "id": 43744,
            "nodeType": "EventDefinition",
            "src": "890:161:179",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 43734,
              "nodeType": "StructuredDocumentation",
              "src": "580:305:179",
              "text": " @notice Emitted when deploying a contract\n @param operationType The opcode used to deploy the contract (CREATE or CREATE2)\n @param contractAddress The created contract address\n @param value The amount of native tokens (in Wei) sent to fund the created contract address"
            },
            "eventSelector": "a1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3",
            "name": "ContractCreated",
            "nameLocation": "896:15:179",
            "parameters": {
              "id": 43743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43736,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "operationType",
                  "nameLocation": "937:13:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43744,
                  "src": "921:29:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43735,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "921:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43738,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "contractAddress",
                  "nameLocation": "976:15:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43744,
                  "src": "960:31:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43737,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "960:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43740,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1017:5:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43744,
                  "src": "1001:21:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43739,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1001:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43742,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "1040:4:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43744,
                  "src": "1032:12:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 43741,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1032:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "911:139:179"
            }
          },
          {
            "id": 43755,
            "nodeType": "EventDefinition",
            "src": "1551:148:179",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 43745,
              "nodeType": "StructuredDocumentation",
              "src": "1057:489:179",
              "text": " @notice Emitted when calling an address (EOA or contract)\n @param operationType The low-level call opcode used to call the `to` address (CALL, STATICALL or DELEGATECALL)\n @param target The address to call. `target` will be unused if a contract is created (operation types 1 and 2).\n @param value The amount of native tokens transferred with the call (in Wei)\n @param selector The first 4 bytes (= function selector) of the data sent with the call"
            },
            "eventSelector": "4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e",
            "name": "Executed",
            "nameLocation": "1557:8:179",
            "parameters": {
              "id": 43754,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43747,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "operationType",
                  "nameLocation": "1591:13:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43755,
                  "src": "1575:29:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43746,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1575:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43749,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "1630:6:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43755,
                  "src": "1614:22:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43748,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1614:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43751,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1662:5:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43755,
                  "src": "1646:21:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43750,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1646:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43753,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "selector",
                  "nameLocation": "1684:8:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43755,
                  "src": "1677:15:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 43752,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1677:6:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1565:133:179"
            }
          },
          {
            "id": 43769,
            "nodeType": "FunctionDefinition",
            "src": "3029:168:179",
            "nodes": [],
            "documentation": {
              "id": 43756,
              "nodeType": "StructuredDocumentation",
              "src": "1705:1319:179",
              "text": " @param operationType The operation type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4\n @param target The address of the EOA or smart contract.  (unused if a contract is created via operation type 1 or 2)\n @param value The amount of native tokens to transfer (in Wei)\n @param data The call data, or the creation bytecode of the contract to deploy\n @dev Generic executor function to:\n - send native tokens to any address.\n - interact with any contract by passing an abi-encoded function call in the `data` parameter.\n - deploy a contract by providing its creation bytecode in the `data` parameter.\n Requirements:\n - SHOULD only be callable by the owner of the contract set via ERC173.\n - if a `value` is provided, the contract MUST have at least this amount in its balance to execute successfully.\n - if the operation type is STATICCALL or DELEGATECALL, `value` SHOULD be 0.\n - `target` SHOULD be address(0) when deploying a contract.\n Emits an {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL)\n Emits a {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)"
            },
            "functionSelector": "44c028fe",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "execute",
            "nameLocation": "3038:7:179",
            "parameters": {
              "id": 43765,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43758,
                  "mutability": "mutable",
                  "name": "operationType",
                  "nameLocation": "3063:13:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43769,
                  "src": "3055:21:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43757,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3055:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43760,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "3094:6:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43769,
                  "src": "3086:14:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43759,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3086:7:179",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43762,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "3118:5:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43769,
                  "src": "3110:13:179",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43761,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3110:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43764,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "3146:4:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43769,
                  "src": "3133:17:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 43763,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3133:5:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3045:111:179"
            },
            "returnParameters": {
              "id": 43768,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43767,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 43769,
                  "src": "3183:12:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 43766,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3183:5:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3182:14:179"
            },
            "scope": 43789,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 43788,
            "nodeType": "FunctionDefinition",
            "src": "4630:203:179",
            "nodes": [],
            "documentation": {
              "id": 43770,
              "nodeType": "StructuredDocumentation",
              "src": "3203:1422:179",
              "text": " @param operationsType The list of operations type used: CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4\n @param targets The list of addresses to call. `targets` will be unused if a contract is created (operation types 1 and 2).\n @param values The list of native token amounts to transfer (in Wei)\n @param datas The list of call data, or the creation bytecode of the contract to deploy\n @dev Generic batch executor function to:\n - send native tokens to any address.\n - interact with any contract by passing an abi-encoded function call in the `datas` parameter.\n - deploy a contract by providing its creation bytecode in the `datas` parameter.\n Requirements:\n - The length of the parameters provided MUST be equal\n - SHOULD only be callable by the owner of the contract set via ERC173.\n - if a `values` is provided, the contract MUST have at least this amount in its balance to execute successfully.\n - if the operation type is STATICCALL or DELEGATECALL, `values` SHOULD be 0.\n - `targets` SHOULD be address(0) when deploying a contract.\n Emits an {Executed} event, when a call is made with `operationType` 0 (CALL), 3 (STATICCALL) or 4 (DELEGATECALL)\n Emits a {ContractCreated} event, when deploying a contract with `operationType` 1 (CREATE) or 2 (CREATE2)"
            },
            "functionSelector": "13ced88d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "execute",
            "nameLocation": "4639:7:179",
            "parameters": {
              "id": 43783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43773,
                  "mutability": "mutable",
                  "name": "operationsType",
                  "nameLocation": "4673:14:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43788,
                  "src": "4656:31:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 43771,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4656:7:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 43772,
                    "nodeType": "ArrayTypeName",
                    "src": "4656:9:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43776,
                  "mutability": "mutable",
                  "name": "targets",
                  "nameLocation": "4714:7:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43788,
                  "src": "4697:24:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 43774,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4697:7:179",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 43775,
                    "nodeType": "ArrayTypeName",
                    "src": "4697:9:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43779,
                  "mutability": "mutable",
                  "name": "values",
                  "nameLocation": "4748:6:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43788,
                  "src": "4731:23:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 43777,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4731:7:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 43778,
                    "nodeType": "ArrayTypeName",
                    "src": "4731:9:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43782,
                  "mutability": "mutable",
                  "name": "datas",
                  "nameLocation": "4779:5:179",
                  "nodeType": "VariableDeclaration",
                  "scope": 43788,
                  "src": "4764:20:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 43780,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "4764:5:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 43781,
                    "nodeType": "ArrayTypeName",
                    "src": "4764:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4646:144:179"
            },
            "returnParameters": {
              "id": 43787,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43786,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 43788,
                  "src": "4817:14:179",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 43784,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "4817:5:179",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 43785,
                    "nodeType": "ArrayTypeName",
                    "src": "4817:7:179",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4816:16:179"
            },
            "scope": 43789,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 43732,
              "name": "IERC165",
              "nameLocations": [
                "566:7:179"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46594,
              "src": "566:7:179"
            },
            "id": 43733,
            "nodeType": "InheritanceSpecifier",
            "src": "566:7:179"
          }
        ],
        "canonicalName": "IERC725X",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 43731,
          "nodeType": "StructuredDocumentation",
          "src": "157:386:179",
          "text": " @title The interface for ERC725X General executor\n @dev ERC725X provides the ability to call arbitrary functions at any other smart contract and itself,\n including using `delegatecall`, `staticcall`, as well as creating contracts using `create` and `create2`\n This is the basis for a smart contract based account system, but could also be used as a proxy account system"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          43789,
          46594
        ],
        "name": "IERC725X",
        "nameLocation": "554:8:179",
        "scope": 43790,
        "usedErrors": []
      }
    ],
    "license": "CC0-1.0"
  },
  "id": 179
}