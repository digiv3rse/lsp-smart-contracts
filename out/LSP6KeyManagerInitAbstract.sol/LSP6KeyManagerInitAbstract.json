{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "invalidValue",
          "type": "bytes"
        }
      ],
      "name": "AddressPermissionArrayIndexValueNotAnAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchExecuteParamsLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BatchExecuteRelayCallParamsLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "invalidLength",
          "type": "uint256"
        }
      ],
      "name": "InvalidCompactByteArrayLengthElement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "invalidFunction",
          "type": "bytes4"
        }
      ],
      "name": "InvalidERC725Function",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "allowedCallsValue",
          "type": "bytes"
        }
      ],
      "name": "InvalidEncodedAllowedCalls",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "InvalidEncodedAllowedERC725YDataKeys",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invalidNonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "InvalidRelayNonce",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "InvalidWhitelistedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalValues",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "LSP6BatchExcessiveValueSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalValues",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "LSP6BatchInsufficientValueSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "NoCallsAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "NoERC725YDataKeysAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "NoPermissionsSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "NotAllowedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "disallowedKey",
          "type": "bytes32"
        }
      ],
      "name": "NotAllowedERC725YDataKey",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "permission",
          "type": "string"
        }
      ],
      "name": "NotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "NotRecognisedPermissionKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDataKeyNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "executeRelayCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        }
      ],
      "name": "executeRelayCall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "channelId",
          "type": "uint128"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "execute(bytes)": "09c5eabe",
    "execute(uint256[],bytes[])": "bf3e1f7b",
    "executeRelayCall(bytes,uint256,bytes)": "902d5fa0",
    "executeRelayCall(bytes[],uint256[],uint256[],bytes[])": "bd68663a",
    "getNonce(address,uint128)": "b44581d9",
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "supportsInterface(bytes4)": "01ffc9a7",
    "target()": "d4b83992"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"invalidValue\",\"type\":\"bytes\"}],\"name\":\"AddressPermissionArrayIndexValueNotAnAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchExecuteParamsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchExecuteRelayCallParamsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalidLength\",\"type\":\"uint256\"}],\"name\":\"InvalidCompactByteArrayLengthElement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"invalidFunction\",\"type\":\"bytes4\"}],\"name\":\"InvalidERC725Function\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"allowedCallsValue\",\"type\":\"bytes\"}],\"name\":\"InvalidEncodedAllowedCalls\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"InvalidEncodedAllowedERC725YDataKeys\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invalidNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"InvalidRelayNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"InvalidWhitelistedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValues\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"LSP6BatchExcessiveValueSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValues\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"LSP6BatchInsufficientValueSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NoCallsAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NoERC725YDataKeysAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NoPermissionsSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"NotAllowedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"disallowedKey\",\"type\":\"bytes32\"}],\"name\":\"NotAllowedERC725YDataKey\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permission\",\"type\":\"string\"}],\"name\":\"NotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"NotRecognisedPermissionKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDataKeyNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"executeRelayCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"}],\"name\":\"executeRelayCall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"channelId\",\"type\":\"uint128\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fabian Vogelsteller <frozeman>, Jean Cavallera (CJ42), Yamen Merhi (YamenMerhi)\",\"details\":\"all the permissions can be set on the ERC725 Account using `setData(...)` with the keys constants below\",\"errors\":{\"AddressPermissionArrayIndexValueNotAnAddress(bytes32,bytes)\":[{\"details\":\"reverts when trying to set a value that is not 20 bytes long under AddressPermissions[index]\",\"params\":{\"dataKey\":\"the AddressPermissions[index] data key\",\"invalidValue\":\"the invalid value that was attempted to be set under AddressPermissions[index]\"}}],\"BatchExecuteParamsLengthMismatch()\":[{\"details\":\"there should be the same number of elements for each array parameters in the following batch functions:  - execute(uint256[],bytes[])  - executeRelayCall(bytes[],uint256[],uint256[],bytes[])\"}],\"BatchExecuteRelayCallParamsLengthMismatch()\":[{\"details\":\"reverts when providing array parameters of different sizes to `executeRelayCall(bytes[],uint256[],bytes[])`\"}],\"InvalidCompactByteArrayLengthElement(uint256)\":[{\"details\":\"reverts when CompatactBytesArray length element is not valid\"}],\"InvalidERC725Function(bytes4)\":[{\"details\":\"reverts when trying to run an invalid function on the linked target account via the Key Manager.\",\"params\":{\"invalidFunction\":\"the bytes4 selector of the invalid function\"}}],\"InvalidEncodedAllowedCalls(bytes)\":[{\"details\":\"reverts when `allowedCallsValue` is not properly encoded as a bytes28[CompactBytesArray] (CompactBytesArray of bytes28 entries). See LSP2 value type `CompactBytesArray` for details.\",\"params\":{\"allowedCallsValue\":\"the list of allowedCalls\"}}],\"InvalidEncodedAllowedERC725YDataKeys(bytes)\":[{\"details\":\"reverts when `value` is not encoded properly using the CompactBytesArray\",\"params\":{\"value\":\"the value to check for an CompactBytesArray\"}}],\"InvalidRelayNonce(address,uint256,bytes)\":[{\"details\":\"reverts when the `signer` address retrieved from the `signature` has an invalid nonce: `invalidNonce`.\",\"params\":{\"invalidNonce\":\"the nonce retrieved for the `signer` address\",\"signature\":\"the signature used to retrieve the `signer` address\",\"signer\":\"the address of the signer\"}}],\"InvalidWhitelistedCall(address)\":[{\"details\":\"a `from` address is not allowed to have 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff in its list of AddressPermissions:AllowedCalls:<address>, as this allows any STANDARD:ADDRESS:FUNCTION. This is equivalent to granting the SUPER permission and should never be valid.\",\"params\":{\"from\":\"the address that has any allowed calls whitelisted.\"}}],\"LSP6BatchExcessiveValueSent(uint256,uint256)\":[{\"details\":\"reverts to avoid the KeyManager to holds some remaining funds sent to the following batch functions:  - execute(uint256[],bytes[])  - executeRelayCall(bytes[],uint256[],uint256[],bytes[]) This error occurs when `msg.value` is more than the sum of all the values being forwarded on each payloads (`values[]` parameter from the batch functions above).\"}],\"LSP6BatchInsufficientValueSent(uint256,uint256)\":[{\"details\":\"the `msg.value` sent is not enough to cover the sum of all the values being forwarded on each payloads (`values[]` parameter) in the following batch functions:  - execute(uint256[],bytes[])  - executeRelayCall(bytes[],uint256[],uint256[],bytes[])\"}],\"NoCallsAllowed(address)\":[{\"details\":\"reverts if there are no allowed calls set for `from`\",\"params\":{\"from\":\"the address that has no AllowedCalls\"}}],\"NoERC725YDataKeysAllowed(address)\":[{\"details\":\"reverts if there are no AllowedERC725YDataKeys set for the caller\",\"params\":{\"from\":\"the address that has no AllowedERC725YDataKeys\"}}],\"NoPermissionsSet(address)\":[{\"details\":\"reverts when address `from` does not have any permissions set on the account linked to this Key Manager\",\"params\":{\"from\":\"the address that does not have permissions\"}}],\"NotAllowedCall(address,address,bytes4)\":[{\"details\":\"reverts when `from` is not authorised to make the call because of a not allowed standard, address or function.\",\"params\":{\"from\":\"address making the request\",\"selector\":\"if `to` is a contract, the bytes4 selector of the function that `from` is trying to call. If no function is called (e.g: a native token transfer), selector = 0x00000000\",\"to\":\"the address of an EOA or contract that `from` is trying to interact with\"}}],\"NotAllowedERC725YDataKey(address,bytes32)\":[{\"details\":\"reverts when address `from` is not authorised to set the key `disallowedKey` on the linked account\",\"params\":{\"disallowedKey\":\"a bytes32 key that `from` is not authorised to set on the ERC725Y storage\",\"from\":\"address making the request\"}}],\"NotAuthorised(address,string)\":[{\"details\":\"reverts when address `from` is not authorised to perform `permission` on the linked account\",\"params\":{\"from\":\"address not-authorised\",\"permission\":\"permission required\"}}],\"NotRecognisedPermissionKey(bytes32)\":[{\"details\":\"reverts when `dataKey` is a bytes32 that does not adhere to any of the      permission data keys specified by the LSP6 standard\",\"params\":{\"dataKey\":\"the dataKey that does not match with any of the standard LSP6 permission data keys\"}}],\"ZeroDataKeyNotAllowed()\":[{\"details\":\"reverts when trying to set the following data key: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\"\"}]},\"kind\":\"dev\",\"methods\":{\"execute(bytes)\":{\"details\":\"the ERC725Account will return some data on successful call, or revert on failure\",\"params\":{\"payload\":\"the payload to execute. Obtained in web3 via encodeABI()\"},\"returns\":{\"_0\":\"the data being returned by the ERC725 Account\"}},\"execute(uint256[],bytes[])\":{\"details\":\"batch `execute(bytes)`\"},\"executeRelayCall(bytes,uint256,bytes)\":{\"details\":\"allows anybody to execute given they have a signed message from an executor\",\"params\":{\"nonce\":\"the address' nonce (in a specific `_channel`), obtained via `getNonce(...)`. Used to prevent replay attack\",\"payload\":\"obtained via encodeABI() in web3\",\"signature\":\"bytes32 ethereum signature\"},\"returns\":{\"_0\":\"the data being returned by the ERC725 Account\"}},\"executeRelayCall(bytes[],uint256[],uint256[],bytes[])\":{\"details\":\"batch `executeRelayCall(...)`\"},\"getNonce(address,uint128)\":{\"details\":\"use channel ID = 0 for sequential nonces, any other number for out-of-order execution (= execution in parallel)\",\"params\":{\"channelId\":\"the channel id to retrieve the nonce from\",\"from\":\"the caller or signer address\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Proxy implementation of a contract acting as a controller of an ERC725 Account, using permissions stored in the ERC725Y storage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(bytes)\":{\"notice\":\"execute the following payload on the ERC725Account: `payload`\"},\"getNonce(address,uint128)\":{\"notice\":\"get latest nonce for `from` in channel ID: `channelId`\"},\"target()\":{\"notice\":\"returns the address of the account linked to this KeyManager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LSP6KeyManager/LSP6KeyManagerInitAbstract.sol\":\"LSP6KeyManagerInitAbstract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@erc725/=node_modules/@erc725/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"contracts/Custom/EIP191Signer.sol\":{\"keccak256\":\"0xcfb2cdb9c783996166967377e86e8f491ae185658932596049dd9f404863db7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b9a1337994890ae30dcae70e2dc3d5208005381c228b8f3f364a7de96014eeaf\",\"dweb:/ipfs/QmR8GYqbwEiMTHWgNh2WvjNGQzBrUtfKptekyVXQcU3zG4\"]},\"contracts/Custom/ERC165Checker.sol\":{\"keccak256\":\"0x08d1d2d4108eb4964940e619106e146f15a7cff65998f6d80795d3aa94c1374e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9843f7fa3c2743ae7dfeaa6df92295f6cbd30ce243728a2185bb3ec15244f549\",\"dweb:/ipfs/QmYTLjbcMYHAxSSMHCW81YTSySGXGo2TGwNQQaCjEMmowB\"]},\"contracts/LSP0ERC725Account/LSP0Constants.sol\":{\"keccak256\":\"0xe1a269b644f96fe7c89abe199832ba17239ba3a650a069881e75de9fd634ba04\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://054eff9745e8400f78ea870428ff858e95caa583352367ea020ff350ce3fd6c5\",\"dweb:/ipfs/QmRNHrwDh1DXCAtQi8Pg1XnkYK5b29ApcERVf4B3guE2nw\"]},\"contracts/LSP14Ownable2Step/ILSP14Ownable2Step.sol\":{\"keccak256\":\"0xccad089e2d5532ec1c13aa14f598289df270aff1cfb3605ff3ed41b84afcdc32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da66220e232bbf60284bd6c0da6b8cee57e9426636d8237cfa9dc9e0c638469e\",\"dweb:/ipfs/QmZoZ98U16t1btjE2ZUXhkn1EH9VfepHifYGsS7Rkf8EJq\"]},\"contracts/LSP17ContractExtension/LSP17Constants.sol\":{\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://880c3b21e2090a14e7bba94ac5c8d4633e8a81d93c6f619454167a01dcc866d8\",\"dweb:/ipfs/QmZp6YVM4Eor5XtuXXqGRaPAJ3u5KCmLwuNRAGf4JY7sK1\"]},\"contracts/LSP1UniversalReceiver/LSP1Constants.sol\":{\"keccak256\":\"0xa6d5ec0a6825237692feeb924e1b04a806fd4bb60ff9ad0b0cc095273b6fcd26\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2e26916a74b5f241dd37d34d0ffdb68b1cbea094cadfbfe293558fffa09df9a2\",\"dweb:/ipfs/QmVbu6qdyf24s9ZSbXXkxDnqqnSwxCR31v8XrxmtdLggP7\"]},\"contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol\":{\"keccak256\":\"0x845fe3fb8ebd55447da86efe2c5d6e7ae1b40ad25dcb01866ca55da5fc02b971\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9e3e2a9cd65c1b2c3b77508d3659b829af5eac34cc6611e0493a8cf7f5a58628\",\"dweb:/ipfs/QmbT4UfZgJmztNx9V7XZvKmuLmE6Er6Vmfphf3YeoZJPcG\"]},\"contracts/LSP6KeyManager/ILSP6KeyManager.sol\":{\"keccak256\":\"0x7399a51ae11af311bfe807412eb42b23c215164d78b2adcfcb2641a06a2aa7dd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9d741831b7579b3c9bee63adb8d9d1dcbae3825c30812e4a118cfccbcc0c7fb3\",\"dweb:/ipfs/QmRzykhSiMYtg5LQvYH7TRZexfFXpk7hJuGrfWEBnSsbnR\"]},\"contracts/LSP6KeyManager/LSP6Constants.sol\":{\"keccak256\":\"0x16145ebe36c4108110017e55f00a71cbc43e8a617ce54aca7236d15670c663e8\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://0f8d09f3ec54bac38cf05b6e9356decad8bf28598d72cdde5dbdb29f444f3238\",\"dweb:/ipfs/QmY2TcgZ4jqGBWGtxJBe3LN86Seggibe3CUQhpvtqv9iRE\"]},\"contracts/LSP6KeyManager/LSP6Errors.sol\":{\"keccak256\":\"0xb6f38b5da79f59f7750604cd762d380cb76acf3d64709c2dead268d427e463fc\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c16bcf33c6207a33a4009ffa562bd27287a7899beb6925c53ad0317efc4a66d1\",\"dweb:/ipfs/QmUC47QXQuCJD4SAmsRYjR2ymiV5qHWBr8n48EthNTeqnE\"]},\"contracts/LSP6KeyManager/LSP6KeyManagerCore.sol\":{\"keccak256\":\"0x8f62ad91f2f8c24d40b1a2627d9a993b2366cb9a507c6dbc087cd2d5185eb45b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fc7ffa65b6a7b9625a7a918c26169cdab83c4c9f37c9ba718df4555613b134d6\",\"dweb:/ipfs/Qmc87gj7y3aQFsrXYMQLC3eSdnoBB8v5sQj27kokgeqgoi\"]},\"contracts/LSP6KeyManager/LSP6KeyManagerInitAbstract.sol\":{\"keccak256\":\"0xdcae9c1bbf752a19f059722c1131635ea3036f0063fbabef6c982b12c34fc05a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://048915f1672b22ada76dac90c134b83ac10cee1bda2e402d514e6279d6ea06e5\",\"dweb:/ipfs/QmVr1FGFvPj6Bv5ArmwDaS2C1CfYiD57Js8Dk6JreVf3J2\"]},\"contracts/LSP6KeyManager/LSP6Utils.sol\":{\"keccak256\":\"0xd1e60d5260cc9820fe1913d5620521afc44e7b1e9fd1baa9c3d64c7f65ed4944\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1884476b137784767c8589ccc49af3b7afc68c70e280b2bdbb28d6c49358cb7\",\"dweb:/ipfs/QmVCmPN7zioWwe1PRX3SBV65ZfJm1gL7YwUPraGgFquPo2\"]},\"contracts/Utils/GasLib.sol\":{\"keccak256\":\"0x6c1b726ea33e120c819f54f1262631365ab32b88fa7b3c48e71f3353548f4845\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://185ffff25266a0f595a18c42f9b6db23d9e9a884f3878a7292d051b2e7fc0bf9\",\"dweb:/ipfs/QmRNgNTUJBxyJ9VwSZy754R4t9B27rJuE8VJ56dSCaUB31\"]},\"node_modules/@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"keccak256\":\"0xf912f29507fa1f3b1521a0b6d94dfcfc8ece8747ecf5d0427b8b19e60a8c3dde\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9ed01859cec769ed52240e4557787e06a8e0e41c07d1c5877e5d9309da3b5244\",\"dweb:/ipfs/QmeEmiY1Qjmka1py6JWBvKBiDt23RZPF3U3qHVmqheWsJL\"]},\"node_modules/@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"keccak256\":\"0xc02f97a3a08b659e4c2d00735b0cbb6d8ab3759693b893fcc3f1213e8f5b2ca6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7d66151e33557a89dcb19c2088b3d6a263d4678b3a3aa2f9b2b336739b506f7b\",\"dweb:/ipfs/QmZQByTDXFXQyAbXHRN592YiggdZc1JvzBG3eXLVNfaW6C\"]},\"node_modules/@erc725/smart-contracts/contracts/constants.sol\":{\"keccak256\":\"0x3f5b99fbe4cfb947060d3fe735cbe49aa485123417c3a1a425f3bc19ff2da3cb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8403c8f3fe0ffb697a9eb170db340ed2873a7a98cbbd913dcb20cabf67327834\",\"dweb:/ipfs/QmXvmrVMGaNbdS1VdLgKB1RNiPLWCtcUXqfXHz3i9C5XUD\"]},\"node_modules/@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"keccak256\":\"0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc4186cf3bffd2b00017463ead8dfdef4c09e47fa943788beec42c4b66253f9e\",\"dweb:/ipfs/QmXvQwkdxHjUJzfs8P86JJbS3aqSgXhxKt4zYSkjW3hnqP\"]},\"node_modules/@erc725/smart-contracts/contracts/errors.sol\":{\"keccak256\":\"0x2f317b1e5f3caa2ffaa26fa6abf483b310c92d7a579207c6febde37422913548\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://440d47addc1cc1cd991c2be80522e3086c8470d3f739387dc81c2920df905089\",\"dweb:/ipfs/QmW64dnj9LAutsgc5sjm35tkgjVWVF236Dy1UXvWczoXFZ\"]},\"node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol\":{\"keccak256\":\"0x5ad1db3b879f7bdc9777bb2bc1f2f58f9a9d41032eab9f70cee9b5ebbbea9a17\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://0914c73bf23f1d954a6704fe454a75b413067371f61c4ad600aa32ef65619f30\",\"dweb:/ipfs/QmYSxfQuaey1P1jpVRa97RVGn32xGM19jZTVSGobFJWtUP\"]},\"node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"keccak256\":\"0x61689c193b68a7f29a9a4cef38d82c6ec5e2b0036e3d8d4cabd6d68ee1eb0142\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://c48adc3fe4b11578339f0fa75839917948e657cdb925956e5b2b01612dfed1c6\",\"dweb:/ipfs/QmcgEaUqFWW3ygbNEKQ9xtfk9SXEAen9eGTXVTieExm5JV\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f\",\"dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"node_modules/solidity-bytes-utils/contracts/BytesLib.sol\":{\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014\",\"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "invalidValue",
              "type": "bytes"
            }
          ],
          "type": "error",
          "name": "AddressPermissionArrayIndexValueNotAnAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BatchExecuteParamsLengthMismatch"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BatchExecuteRelayCallParamsLengthMismatch"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "invalidLength",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidCompactByteArrayLengthElement"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "invalidFunction",
              "type": "bytes4"
            }
          ],
          "type": "error",
          "name": "InvalidERC725Function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "allowedCallsValue",
              "type": "bytes"
            }
          ],
          "type": "error",
          "name": "InvalidEncodedAllowedCalls"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "type": "error",
          "name": "InvalidEncodedAllowedERC725YDataKeys"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "invalidNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "type": "error",
          "name": "InvalidRelayNonce"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "InvalidWhitelistedCall"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "totalValues",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "msgValue",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "LSP6BatchExcessiveValueSent"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "totalValues",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "msgValue",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "LSP6BatchInsufficientValueSent"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "NoCallsAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "NoERC725YDataKeysAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "NoPermissionsSet"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            }
          ],
          "type": "error",
          "name": "NotAllowedCall"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "disallowedKey",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "NotAllowedERC725YDataKey"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "permission",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "NotAuthorised"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "NotRecognisedPermissionKey"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroDataKeyNotAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Executed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "payloads",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "executeRelayCall",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "nonces",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "payloads",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "executeRelayCall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "channelId",
              "type": "uint128"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "target",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "execute(bytes)": {
            "details": "the ERC725Account will return some data on successful call, or revert on failure",
            "params": {
              "payload": "the payload to execute. Obtained in web3 via encodeABI()"
            },
            "returns": {
              "_0": "the data being returned by the ERC725 Account"
            }
          },
          "execute(uint256[],bytes[])": {
            "details": "batch `execute(bytes)`"
          },
          "executeRelayCall(bytes,uint256,bytes)": {
            "details": "allows anybody to execute given they have a signed message from an executor",
            "params": {
              "nonce": "the address' nonce (in a specific `_channel`), obtained via `getNonce(...)`. Used to prevent replay attack",
              "payload": "obtained via encodeABI() in web3",
              "signature": "bytes32 ethereum signature"
            },
            "returns": {
              "_0": "the data being returned by the ERC725 Account"
            }
          },
          "executeRelayCall(bytes[],uint256[],uint256[],bytes[])": {
            "details": "batch `executeRelayCall(...)`"
          },
          "getNonce(address,uint128)": {
            "details": "use channel ID = 0 for sequential nonces, any other number for out-of-order execution (= execution in parallel)",
            "params": {
              "channelId": "the channel id to retrieve the nonce from",
              "from": "the caller or signer address"
            }
          },
          "isValidSignature(bytes32,bytes)": {
            "details": "Should return whether the signature provided is valid for the provided data",
            "params": {
              "hash": "Hash of the data to be signed",
              "signature": "Signature byte array associated with _data"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "execute(bytes)": {
            "notice": "execute the following payload on the ERC725Account: `payload`"
          },
          "getNonce(address,uint128)": {
            "notice": "get latest nonce for `from` in channel ID: `channelId`"
          },
          "target()": {
            "notice": "returns the address of the account linked to this KeyManager"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@erc725/=node_modules/@erc725/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":solidity-bytes-utils/=node_modules/solidity-bytes-utils/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/LSP6KeyManager/LSP6KeyManagerInitAbstract.sol": "LSP6KeyManagerInitAbstract"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/Custom/EIP191Signer.sol": {
        "keccak256": "0xcfb2cdb9c783996166967377e86e8f491ae185658932596049dd9f404863db7b",
        "urls": [
          "bzz-raw://b9a1337994890ae30dcae70e2dc3d5208005381c228b8f3f364a7de96014eeaf",
          "dweb:/ipfs/QmR8GYqbwEiMTHWgNh2WvjNGQzBrUtfKptekyVXQcU3zG4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/Custom/ERC165Checker.sol": {
        "keccak256": "0x08d1d2d4108eb4964940e619106e146f15a7cff65998f6d80795d3aa94c1374e",
        "urls": [
          "bzz-raw://9843f7fa3c2743ae7dfeaa6df92295f6cbd30ce243728a2185bb3ec15244f549",
          "dweb:/ipfs/QmYTLjbcMYHAxSSMHCW81YTSySGXGo2TGwNQQaCjEMmowB"
        ],
        "license": "MIT"
      },
      "contracts/LSP0ERC725Account/LSP0Constants.sol": {
        "keccak256": "0xe1a269b644f96fe7c89abe199832ba17239ba3a650a069881e75de9fd634ba04",
        "urls": [
          "bzz-raw://054eff9745e8400f78ea870428ff858e95caa583352367ea020ff350ce3fd6c5",
          "dweb:/ipfs/QmRNHrwDh1DXCAtQi8Pg1XnkYK5b29ApcERVf4B3guE2nw"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP14Ownable2Step/ILSP14Ownable2Step.sol": {
        "keccak256": "0xccad089e2d5532ec1c13aa14f598289df270aff1cfb3605ff3ed41b84afcdc32",
        "urls": [
          "bzz-raw://da66220e232bbf60284bd6c0da6b8cee57e9426636d8237cfa9dc9e0c638469e",
          "dweb:/ipfs/QmZoZ98U16t1btjE2ZUXhkn1EH9VfepHifYGsS7Rkf8EJq"
        ],
        "license": "MIT"
      },
      "contracts/LSP17ContractExtension/LSP17Constants.sol": {
        "keccak256": "0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036",
        "urls": [
          "bzz-raw://880c3b21e2090a14e7bba94ac5c8d4633e8a81d93c6f619454167a01dcc866d8",
          "dweb:/ipfs/QmZp6YVM4Eor5XtuXXqGRaPAJ3u5KCmLwuNRAGf4JY7sK1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP1UniversalReceiver/LSP1Constants.sol": {
        "keccak256": "0xa6d5ec0a6825237692feeb924e1b04a806fd4bb60ff9ad0b0cc095273b6fcd26",
        "urls": [
          "bzz-raw://2e26916a74b5f241dd37d34d0ffdb68b1cbea094cadfbfe293558fffa09df9a2",
          "dweb:/ipfs/QmVbu6qdyf24s9ZSbXXkxDnqqnSwxCR31v8XrxmtdLggP7"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol": {
        "keccak256": "0x845fe3fb8ebd55447da86efe2c5d6e7ae1b40ad25dcb01866ca55da5fc02b971",
        "urls": [
          "bzz-raw://9e3e2a9cd65c1b2c3b77508d3659b829af5eac34cc6611e0493a8cf7f5a58628",
          "dweb:/ipfs/QmbT4UfZgJmztNx9V7XZvKmuLmE6Er6Vmfphf3YeoZJPcG"
        ],
        "license": "GPL-3.0"
      },
      "contracts/LSP6KeyManager/ILSP6KeyManager.sol": {
        "keccak256": "0x7399a51ae11af311bfe807412eb42b23c215164d78b2adcfcb2641a06a2aa7dd",
        "urls": [
          "bzz-raw://9d741831b7579b3c9bee63adb8d9d1dcbae3825c30812e4a118cfccbcc0c7fb3",
          "dweb:/ipfs/QmRzykhSiMYtg5LQvYH7TRZexfFXpk7hJuGrfWEBnSsbnR"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP6KeyManager/LSP6Constants.sol": {
        "keccak256": "0x16145ebe36c4108110017e55f00a71cbc43e8a617ce54aca7236d15670c663e8",
        "urls": [
          "bzz-raw://0f8d09f3ec54bac38cf05b6e9356decad8bf28598d72cdde5dbdb29f444f3238",
          "dweb:/ipfs/QmY2TcgZ4jqGBWGtxJBe3LN86Seggibe3CUQhpvtqv9iRE"
        ],
        "license": "CC0-1.0"
      },
      "contracts/LSP6KeyManager/LSP6Errors.sol": {
        "keccak256": "0xb6f38b5da79f59f7750604cd762d380cb76acf3d64709c2dead268d427e463fc",
        "urls": [
          "bzz-raw://c16bcf33c6207a33a4009ffa562bd27287a7899beb6925c53ad0317efc4a66d1",
          "dweb:/ipfs/QmUC47QXQuCJD4SAmsRYjR2ymiV5qHWBr8n48EthNTeqnE"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP6KeyManager/LSP6KeyManagerCore.sol": {
        "keccak256": "0x8f62ad91f2f8c24d40b1a2627d9a993b2366cb9a507c6dbc087cd2d5185eb45b",
        "urls": [
          "bzz-raw://fc7ffa65b6a7b9625a7a918c26169cdab83c4c9f37c9ba718df4555613b134d6",
          "dweb:/ipfs/Qmc87gj7y3aQFsrXYMQLC3eSdnoBB8v5sQj27kokgeqgoi"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP6KeyManager/LSP6KeyManagerInitAbstract.sol": {
        "keccak256": "0xdcae9c1bbf752a19f059722c1131635ea3036f0063fbabef6c982b12c34fc05a",
        "urls": [
          "bzz-raw://048915f1672b22ada76dac90c134b83ac10cee1bda2e402d514e6279d6ea06e5",
          "dweb:/ipfs/QmVr1FGFvPj6Bv5ArmwDaS2C1CfYiD57Js8Dk6JreVf3J2"
        ],
        "license": "Apache-2.0"
      },
      "contracts/LSP6KeyManager/LSP6Utils.sol": {
        "keccak256": "0xd1e60d5260cc9820fe1913d5620521afc44e7b1e9fd1baa9c3d64c7f65ed4944",
        "urls": [
          "bzz-raw://a1884476b137784767c8589ccc49af3b7afc68c70e280b2bdbb28d6c49358cb7",
          "dweb:/ipfs/QmVCmPN7zioWwe1PRX3SBV65ZfJm1gL7YwUPraGgFquPo2"
        ],
        "license": "Apache-2.0"
      },
      "contracts/Utils/GasLib.sol": {
        "keccak256": "0x6c1b726ea33e120c819f54f1262631365ab32b88fa7b3c48e71f3353548f4845",
        "urls": [
          "bzz-raw://185ffff25266a0f595a18c42f9b6db23d9e9a884f3878a7292d051b2e7fc0bf9",
          "dweb:/ipfs/QmRNgNTUJBxyJ9VwSZy754R4t9B27rJuE8VJ56dSCaUB31"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/ERC725Y.sol": {
        "keccak256": "0xf912f29507fa1f3b1521a0b6d94dfcfc8ece8747ecf5d0427b8b19e60a8c3dde",
        "urls": [
          "bzz-raw://9ed01859cec769ed52240e4557787e06a8e0e41c07d1c5877e5d9309da3b5244",
          "dweb:/ipfs/QmeEmiY1Qjmka1py6JWBvKBiDt23RZPF3U3qHVmqheWsJL"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/ERC725YCore.sol": {
        "keccak256": "0xc02f97a3a08b659e4c2d00735b0cbb6d8ab3759693b893fcc3f1213e8f5b2ca6",
        "urls": [
          "bzz-raw://7d66151e33557a89dcb19c2088b3d6a263d4678b3a3aa2f9b2b336739b506f7b",
          "dweb:/ipfs/QmZQByTDXFXQyAbXHRN592YiggdZc1JvzBG3eXLVNfaW6C"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/constants.sol": {
        "keccak256": "0x3f5b99fbe4cfb947060d3fe735cbe49aa485123417c3a1a425f3bc19ff2da3cb",
        "urls": [
          "bzz-raw://8403c8f3fe0ffb697a9eb170db340ed2873a7a98cbbd913dcb20cabf67327834",
          "dweb:/ipfs/QmXvmrVMGaNbdS1VdLgKB1RNiPLWCtcUXqfXHz3i9C5XUD"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/custom/OwnableUnset.sol": {
        "keccak256": "0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf",
        "urls": [
          "bzz-raw://bc4186cf3bffd2b00017463ead8dfdef4c09e47fa943788beec42c4b66253f9e",
          "dweb:/ipfs/QmXvQwkdxHjUJzfs8P86JJbS3aqSgXhxKt4zYSkjW3hnqP"
        ],
        "license": "MIT"
      },
      "node_modules/@erc725/smart-contracts/contracts/errors.sol": {
        "keccak256": "0x2f317b1e5f3caa2ffaa26fa6abf483b310c92d7a579207c6febde37422913548",
        "urls": [
          "bzz-raw://440d47addc1cc1cd991c2be80522e3086c8470d3f739387dc81c2920df905089",
          "dweb:/ipfs/QmW64dnj9LAutsgc5sjm35tkgjVWVF236Dy1UXvWczoXFZ"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725X.sol": {
        "keccak256": "0x5ad1db3b879f7bdc9777bb2bc1f2f58f9a9d41032eab9f70cee9b5ebbbea9a17",
        "urls": [
          "bzz-raw://0914c73bf23f1d954a6704fe454a75b413067371f61c4ad600aa32ef65619f30",
          "dweb:/ipfs/QmYSxfQuaey1P1jpVRa97RVGn32xGM19jZTVSGobFJWtUP"
        ],
        "license": "CC0-1.0"
      },
      "node_modules/@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
        "keccak256": "0x61689c193b68a7f29a9a4cef38d82c6ec5e2b0036e3d8d4cabd6d68ee1eb0142",
        "urls": [
          "bzz-raw://c48adc3fe4b11578339f0fa75839917948e657cdb925956e5b2b01612dfed1c6",
          "dweb:/ipfs/QmcgEaUqFWW3ygbNEKQ9xtfk9SXEAen9eGTXVTieExm5JV"
        ],
        "license": "CC0-1.0"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66",
        "urls": [
          "bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f",
          "dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
        "urls": [
          "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
          "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "node_modules/solidity-bytes-utils/contracts/BytesLib.sol": {
        "keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
        "urls": [
          "bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
          "dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
        ],
        "license": "Unlicense"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/LSP6KeyManager/LSP6KeyManagerInitAbstract.sol",
    "id": 7552,
    "exportedSymbols": {
      "ERC165": [
        46531
      ],
      "Initializable": [
        44479
      ],
      "InvalidLSP6Target": [
        5060
      ],
      "LSP6KeyManagerCore": [
        7479
      ],
      "LSP6KeyManagerInitAbstract": [
        7551
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:959:41",
    "nodes": [
      {
        "id": 7512,
        "nodeType": "PragmaDirective",
        "src": "39:23:41",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".5"
        ]
      },
      {
        "id": 7514,
        "nodeType": "ImportDirective",
        "src": "75:78:41",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7552,
        "sourceUnit": 46532,
        "symbolAliases": [
          {
            "foreign": {
              "id": 7513,
              "name": "ERC165",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46531,
              "src": "83:6:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7516,
        "nodeType": "ImportDirective",
        "src": "154:84:41",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7552,
        "sourceUnit": 44480,
        "symbolAliases": [
          {
            "foreign": {
              "id": 7515,
              "name": "Initializable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 44479,
              "src": "162:13:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7518,
        "nodeType": "ImportDirective",
        "src": "239:60:41",
        "nodes": [],
        "absolutePath": "contracts/LSP6KeyManager/LSP6KeyManagerCore.sol",
        "file": "./LSP6KeyManagerCore.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7552,
        "sourceUnit": 7480,
        "symbolAliases": [
          {
            "foreign": {
              "id": 7517,
              "name": "LSP6KeyManagerCore",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7479,
              "src": "247:18:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7520,
        "nodeType": "ImportDirective",
        "src": "300:51:41",
        "nodes": [],
        "absolutePath": "contracts/LSP6KeyManager/LSP6Errors.sol",
        "file": "./LSP6Errors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7552,
        "sourceUnit": 5135,
        "symbolAliases": [
          {
            "foreign": {
              "id": 7519,
              "name": "InvalidLSP6Target",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5060,
              "src": "308:17:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 7551,
        "nodeType": "ContractDefinition",
        "src": "702:295:41",
        "nodes": [
          {
            "id": 7550,
            "nodeType": "FunctionDefinition",
            "src": "790:205:41",
            "nodes": [],
            "body": {
              "id": 7549,
              "nodeType": "Block",
              "src": "862:133:41",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 7537,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7532,
                      "name": "target_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7527,
                      "src": "876:7:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 7535,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "895:1:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 7534,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "887:7:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 7533,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "887:7:41",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 7536,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "887:10:41",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "876:21:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7541,
                  "nodeType": "IfStatement",
                  "src": "872:53:41",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7538,
                        "name": "InvalidLSP6Target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5060,
                        "src": "906:17:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7539,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "906:19:41",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7540,
                    "nodeType": "RevertStatement",
                    "src": "899:26:41"
                  }
                },
                {
                  "expression": {
                    "id": 7544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7542,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5244,
                      "src": "935:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 7543,
                      "name": "target_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7527,
                      "src": "944:7:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "935:16:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 7545,
                  "nodeType": "ExpressionStatement",
                  "src": "935:16:41"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 7546,
                      "name": "_setupLSP6ReentrancyGuard",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7437,
                      "src": "961:25:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 7547,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "961:27:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7548,
                  "nodeType": "ExpressionStatement",
                  "src": "961:27:41"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7530,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7529,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "845:16:41"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 44442,
                  "src": "845:16:41"
                },
                "nodeType": "ModifierInvocation",
                "src": "845:16:41"
              }
            ],
            "name": "_initialize",
            "nameLocation": "799:11:41",
            "parameters": {
              "id": 7528,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7527,
                  "mutability": "mutable",
                  "name": "target_",
                  "nameLocation": "819:7:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 7550,
                  "src": "811:15:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7526,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "811:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "810:17:41"
            },
            "returnParameters": {
              "id": 7531,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:0:41"
            },
            "scope": 7551,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 7522,
              "name": "Initializable",
              "nameLocations": [
                "750:13:41"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 44479,
              "src": "750:13:41"
            },
            "id": 7523,
            "nodeType": "InheritanceSpecifier",
            "src": "750:13:41"
          },
          {
            "baseName": {
              "id": 7524,
              "name": "LSP6KeyManagerCore",
              "nameLocations": [
                "765:18:41"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7479,
              "src": "765:18:41"
            },
            "id": 7525,
            "nodeType": "InheritanceSpecifier",
            "src": "765:18:41"
          }
        ],
        "canonicalName": "LSP6KeyManagerInitAbstract",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 7521,
          "nodeType": "StructuredDocumentation",
          "src": "353:348:41",
          "text": " @title Proxy implementation of a contract acting as a controller of an ERC725 Account, using permissions stored in the ERC725Y storage\n @author Fabian Vogelsteller <frozeman>, Jean Cavallera (CJ42), Yamen Merhi (YamenMerhi)\n @dev all the permissions can be set on the ERC725 Account using `setData(...)` with the keys constants below"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          7551,
          7479,
          4918,
          44248,
          46531,
          46594,
          44479
        ],
        "name": "LSP6KeyManagerInitAbstract",
        "nameLocation": "720:26:41",
        "scope": 7552,
        "usedErrors": [
          5029,
          5036,
          5045,
          5052,
          5057,
          5069,
          5074,
          5079,
          5086,
          5091,
          5096,
          5101,
          5106,
          5109,
          5112,
          5115,
          5122,
          5129,
          5134
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 41
}