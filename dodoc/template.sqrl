<!-- This file is auto-generated. Do not edit! -->
<!-- Check `@lukso-network/lsp-smart-contracts/CONTRIBUTING.md#solidity-code-comments` for more information. -->


{{@if (it.name)}}
# {{it.name}}
{{/if}}


:::info Standard Specifications

{{@generateContractSpecsDetails(it.name) => specsDetails}}
[`{{specsDetails.specsName}}`]({{specsDetails.specsLink}})
{{/generateContractSpecsDetails}}

:::
:::info Solidity implementation

[`{{it.name}}.sol`]({{@generateContractLink(it.name) /}})

:::


{{@if (it.title)}}
{{@createLocalLinks(it.title) => val}}
> {{val}}
{{/createLocalLinks}}
{{/if}}


{{@if (it.notice)}}
{{@formatLinks(it.notice) => val}}
*{{@parseNotice(val) /}}*
{{/formatLinks}}
{{/if}}


{{@if (it.details)}}
{{@formatLinks(it.details) => val}}
{{@parseDetails(val) /}}
{{/formatLinks}}
{{/if}}


{{@if (Object.keys(it.methods).length > 0)}}


## Public Methods


Public methods are accessible externally from users, allowing interaction with this function from dApps or other smart contracts.
When marked as 'public', a method can be called both externally and internally, on the other hand, when marked as 'external', a method can only be called externally.


{{@splitMethods(it.methods) => methods}}
{{@each(methods) => val, index}}
{{@foreach(val) => key, val}}
### {{key.split('(')[0]}}


:::note References{{'\n\n'}}{{@generateAdditionalMethodInfo(it.name, val.code) /}}{{'\n\n'}}:::


{{@if (val['custom:info'])}}
:::info{{'\n\n'}}{{ @formatCustomTags(val['custom:info']) /}}{{'\n\n'}}:::
{{/if}}


{{@if (val['custom:hint'])}}
:::tip Hint{{'\n\n'}}{{ @formatCustomTags(val['custom:hint']) /}}{{'\n\n'}}:::
{{/if}}


{{@if (val['custom:warning'])}}
:::caution Warning{{'\n\n'}}{{ @formatCustomTags(val['custom:warning']) /}}{{'\n\n'}}:::
{{/if}}


{{@if (val['custom:danger'])}}
:::danger{{'\n\n'}}{{ @formatCustomTags(val['custom:danger']) /}}{{'\n\n'}}:::
{{/if}}


```solidity
{{@formatDisplayedCode(val.code) /}};
```


{{@if (val.notice)}}
*{{@parseNotice(val.notice) /}}*
{{/if}}


{{@if (val.details)}}
{{@parseDetails(val.details) /}}
{{/if}}


{{@if (val['custom:requirements'])}}
<blockquote>{{'\n\n'}}
{{@parseCustomRequirements(val['custom:requirements']) /}}
{{'\n\n'}}</blockquote>
{{/if}}


{{@if (val['custom:events'])}}
<blockquote>{{'\n\n'}}
{{@parseCustomEvents(val['custom:events']) /}}
{{'\n\n'}}</blockquote>
{{/if}}


{{@if (Object.keys(val.inputs).length > 0)}}
#### Parameters

| Name | Type | Description |
|---|:-:|---|
{{@foreach(val.inputs) => key, val}}
| `{{key}}` | `{{@formatParamType(val.type) /}}` | {{@formatParamDescription(val.description) /}} |
{{/foreach}}
{{/if}}


{{@if (Object.keys(val.outputs).length > 0)}}
#### Returns

| Name | Type | Description |
|---|:-:|---|
{{@foreach(val.outputs) => key, val}}
| {{@if (key[0] === '_')}}`{{key.substring(1)}}`{{#else}}`{{key}}`{{/if}} | `{{@formatParamType(val.type) /}}` | {{@formatParamDescription(val.description) /}} |
{{/foreach}}
{{/if}}
<br/>


{{/foreach}}
{{/each}}
{{/splitMethods}}


{{/if}}


{{@if (Object.keys(it.internalMethods).length > 0)}}

## Internal Methods

Any method labeled as `internal` serves as utility function within the contract. They can be used when writing solidity contracts that inherit from this contract. These methods can be extended or modified by overriding their internal behavior to suit specific needs.

Internal functions cannot be called externally, whether from other smart contracts, dApp interfaces, or backend services. Their restricted accessibility ensures that they remain exclusively available within the context of the current contract, promoting controlled and encapsulated usage of these internal utilities.


{{@foreach(it.internalMethods) => key, val}}
### {{key.split('(')[0]}}

{{@if (val['custom:info'])}}
:::info{{'\n\n'}}{{ @formatCustomTags(val['custom:info']) /}}{{'\n\n'}}:::
{{/if}}


{{@if (val['custom:hint'])}}
:::tip Hint{{'\n\n'}}{{ @formatCustomTags(val['custom:hint']) /}}{{'\n\n'}}:::
{{/if}}


{{@if (val['custom:warning'])}}
:::caution Warning{{'\n\n'}}{{ @formatCustomTags(val['custom:warning']) /}}{{'\n\n'}}:::
{{/if}}


{{@if (val['custom:danger'])}}
:::danger{{'\n\n'}}{{ @formatCustomTags(val['custom:danger']) /}}{{'\n\n'}}:::
{{/if}}


```solidity
{{@formatDisplayedCode(val.code) /}};
```


{{@if (val.notice)}}
*{{@parseNotice(val.notice) /}}*
{{/if}}


{{@if (val.details)}}
{{@parseDetails(val.details) /}}
{{/if}}


{{@if (val['custom:requirements'])}}
<blockquote>{{'\n\n'}}
{{@parseCustomRequirements(val['custom:requirements']) /}}
{{'\n\n'}}</blockquote>
{{/if}}


{{@if (val['custom:events'])}}
<blockquote>{{'\n\n'}}
{{@parseCustomEvents(val['custom:events']) /}}
{{'\n\n'}}</blockquote>
{{/if}}


{{@if (Object.keys(val.inputs).length > 0)}}
#### Parameters

| Name | Type | Description |
|---|:-:|---|
{{@foreach(val.inputs) => key, val}}
| `{{key}}` | `{{@formatParamType(val.type) /}}` | {{@formatParamDescription(val.description) /}} |
{{/foreach}}
{{/if}}


{{@if (Object.keys(val.outputs).length > 0)}}
#### Returns

| Name | Type | Description |
|---|:-:|---|
{{@foreach(val.outputs) => key, val}}
| {{@if (key[0] === '_')}}`{{key.substring(1)}}`{{#else}}`{{key}}`{{/if}} | `{{@formatParamType(val.type) /}}` | {{@formatParamDescription(val.description) /}} |
{{/foreach}}
{{/if}}
<br/>

{{/foreach}}


{{/if}}


{{@if (Object.keys(it.events).length > 0)}}
## Events


{{@foreach(it.events) => key, val}}
### {{key.split('(')[0]}}


:::note References{{'\n\n'}}{{@generateAdditionalEventInfo(it.name, val.code) /}}{{'\n\n'}}:::


```solidity
{{@formatDisplayedCode(val.code) /}};
```


{{@if (val.notice)}}
*{{@parseNotice(val.notice) /}}*
{{/if}}


{{@if (val.details)}}
{{@parseDetails(val.details) /}}
{{/if}}


{{@if (Object.keys(val.inputs).length > 0)}}
#### Parameters


| Name | Type | Description |
|---|:-:|---|
{{@foreach(val.inputs) => key, val}}
| `{{key}}` {{@if (val.indexed)}}**`indexed`**{{/if}} | `{{@formatParamType(val.type) /}}` | {{@formatParamDescription(val.description) /}} |
{{/foreach}}
{{/if}}
<br/>

{{/foreach}}
{{/if}}


{{@if (Object.keys(it.errors).length > 0)}}
## Errors


{{@foreach(it.errors) => key, val}}
### {{key.split('(')[0]}}


:::note References{{'\n\n'}}{{@generateAdditionalErrorInfo(it.name, val.code) /}}{{'\n\n'}}:::


```solidity
{{@formatDisplayedCode(val.code) /}};
```


{{@if (val.notice)}}
*{{@parseNotice(val.notice) /}}*
{{/if}}


{{@if (val.details)}}
{{@parseDetails(val.details) /}}
{{/if}}


{{@if (Object.keys(val.inputs).length > 0)}}
#### Parameters

| Name | Type | Description |
|---|:-:|---|
{{@foreach(val.inputs) => key, val}}
| `{{key}}` | `{{@formatParamType(val.type) /}}` | {{@formatParamDescription(val.description) /}} |
{{/foreach}}
{{/if}}
<br/>

{{/foreach}}
{{/if}}